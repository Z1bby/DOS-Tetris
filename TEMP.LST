Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-1


       1				.386 
       2 0000				instructions		SEGMENT	
						use16 
       3								
						ASSUME		cs:instructions
					 
       4 0000				variables proc 
       5 0000  C3					ret 
       6 0001  ????????			vector8			dd	
						? 
       7 0005  ????????			vector9			dd	
						? 
       8 0009  00			game_over		db	
						0 
       9 000A  ????????			random_number	dd		? 
      10 000E  4F1E 6636 0248 0808	colors			dw	
						4f1eh, 6636h, 0248h, 0808h
							; left8bit=border_color
					, right8bit=inside_color. 
      11 0016  0008			tile_size		dw	
						8 
      12				;#region shapes 
      13				;		SHAPE O: 
      14				;				[ ][ ][
					 ][ ] 
      15				;				[ ][1][
					2][ ] 
      16				;				[ ][3][
					4][ ] 
      17				;				[ ][ ][
					 ][ ] 
      18 0018  02010201			shape_O_X		dd	
						01020102h 
      19 001C  02020101			shape_O_Y		dd	
						01010202h		 
      20				;		SHAPE I: 
      21				;				[ ][ ][
					 ][ ]	[ ][ ][1][ ] 
      22				;				[1][2][
					3][4]	[ ][ ][2][ ] 
      23				;				[ ][ ][
					 ][ ]	[ ][ ][3][ ] 
      24				;				[ ][ ][
					 ][ ]	[ ][ ][4][ ] 
      25 0020  0302010002020202		shape_I_X		dd	
						00010203h, 02020202h 
      26 0028  0101010103020100		shape_I_Y		dd	
						01010101h, 00010203h 
      27				;		SHAPE T: 
      28				;				[ ][ ][
					 ][ ]	[ ][ ][1][ ]	[ ][ ][1][ ]
						[ ][ ][1][ ] 
      29				;				[ ][1][
					2][3]	[ ][2][3][ ]	[ ][2][3][4]
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-2


						[ ][ ][2][3] 
      30				;				[ ][ ][
					4][ ]	[ ][ ][4][ ]	[ ][ ][ ][ ]
						[ ][ ][4][ ] 
      31				;				[ ][ ][
					 ][ ]	[ ][ ][ ][ ]	[ ][ ][ ][ ]
						[ ][ ][ ][ ] 
      32 0030  02030201020201020302	shape_T_X		dd	
						01020302h, 02010202h, 02010203h
					, 02020302h 
      33       010202030202		
      34 0040  02010101020101000101	shape_T_Y		dd	
						01010102h, 00010102h, 00010101h
					, 00010102h 
      35       010002010100		
      36				;		SHAPE L: 
      37				;				[ ][ ][
					 ][ ]	[ ][1][2][ ]	[ ][ ][ ][1]
						[ ][ ][1][ ] 
      38				;				[ ][1][
					2][3]	[ ][ ][3][ ]	[ ][2][3][4]
						[ ][ ][2][ ] 
      39				;				[ ][4][
					 ][ ]	[ ][ ][4][ ]	[ ][ ][ ][ ]
						[ ][ ][3][4] 
      40				;				[ ][ ][
					 ][ ]	[ ][ ][ ][ ]	[ ][ ][ ][ ]
						[ ][ ][ ][ ] 
      41 0050  01030201020202010302	shape_L_X		dd	
						01020301h, 01020202h, 03010203h
					, 02020203h 
      42       010303020202		
      43 0060  02010101020100000101	shape_L_Y		dd	
						01010102h, 00000102h, 00010101h
					, 00010202h 
      44       010002020100		
      45				;		SHAPE J: 
      46				;				[ ][ ][
					 ][ ]	[ ][ ][1][ ]	[ ][1][ ][ ]
						[ ][ ][1][2] 
      47				;				[ ][1][
					2][3]	[ ][ ][2][ ]	[ ][2][3][4]
						[ ][ ][3][ ] 
      48				;				[ ][ ][
					 ][4]	[ ][3][4][ ]	[ ][ ][ ][ ]
						[ ][ ][4][ ] 
      49				;				[ ][ ][
					 ][ ]	[ ][ ][ ][ ]	[ ][ ][ ][ ]
						[ ][ ][ ][ ] 
      50 0070  03030201020102020302	shape_J_X		dd	
						01020303h, 02020102h, 01010203h
					, 02030202h 
      51       010102020302		
      52 0080  02010101020201000101	shape_J_Y		dd	
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-3


						01010102h, 00010202h, 00010101h
					, 00000102h 
      53       010002010000		
      54				;		SHAPE S: 
      55				;				[ ][ ][
					 ][ ]	[ ][ ][1][ ] 
      56				;				[ ][ ][
					1][2]	[ ][ ][2][3] 
      57				;				[ ][3][
					4][ ]	[ ][ ][ ][4] 
      58				;				[ ][ ][
					 ][ ]	[ ][ ][ ][ ] 
      59 0090  0201030203030202		shape_S_X		dd	
						02030102h, 02020303h 
      60 0098  0202010102010100		shape_S_Y		dd	
						01010202h, 00010102h 
      61				;		SHAPE Z: 
      62				;				[ ][ ][
					 ][ ]	[ ][ ][ ][1] 
      63				;				[ ][1][
					2][ ]	[ ][ ][2][3] 
      64				;				[ ][ ][
					3][4]	[ ][ ][4][ ] 
      65				;				[ ][ ][
					 ][ ]	[ ][ ][ ][ ] 
      66 00A0  0302020102030203		shape_Z_X		dd	
						01020203h, 03020302h 
      67 00A8  0202010102010100		shape_Z_Y		dd	
						01010202h, 00010102h 
      68				;#endregion 
      69				;#region player 1 
      70 00B0  ????			p1_top_left_next	dw	
						? 
      71 00B2  ????			p1_top_left		dw	
						? 
      72 00B4  ????			p1_key_R		dw	
						? 
      73 00B6  ????			p1_key_L		dw	
						? 
      74 00B8  ????			p1_key_D		dw	
						? 
      75 00BA  ????			p1_key_RR		dw	
						? 
      76 00BC  ????			p1_key_LR		dw	
						? 
      77 00BE  00			p1_pressing_R	db		0 
      78 00BF  00			p1_pressing_L	db		0 
      79 00C0  00			p1_pressing_D	db		0 
      80 00C1  00			p1_pressing_RR	db		0 
      81 00C2  00			p1_pressing_RL	db		0 
      82 00C3  00			p1_moving_R		db	
						0 
      83 00C4  00			p1_moving_L		db	
						0 
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-4


      84 00C5  ????			p1_color		dw	
						? 
      85 00C7  00			p1_delay		db	
						0 
      86 00C8  ??			p1_shape		db	
						? 
      87 00C9  ??			p1_rotation		db	
						? 
      88 00CA  00D2[			p1_board		dw	
						210 dup (0) 
      89	   0000			
      90			 ]	
      91				
      92 026E  ??			p1_shape_X		db	
						? 
      93 026F  ??			p1_shape_Y		db	
						? 
      94 0270  0004[			p1_tiles_X		db	
						4 dup (?) 
      95	    ??			
      96			 ]	
      97				
      98 0274  0004[			p1_tiles_Y		db	
						4 dup (?) 
      99	    ??			
     100			 ]	
     101				
     102 0278  0004[			p1_pixel_positions		dw
							4 dup (?) 
     103	   ????			
     104			 ]	
     105				
     106 0280  ??			p1_speed		db	
						? 
     107 0281  ??			p1_speed_step	db		? 
     108 0282  00			p1_move_step	db		0 
     109 0283  ????????			p1_rand_number	dd		? 
     110 0287  ??			p1_next_shape	db		? 
     111 0288  01			p1_can_move_D	db		1 
     112				;#endregion 
     113				;#region player 2 
     114 0289  ????			p2_top_left_next	dw	
						? 
     115 028B  ????			p2_top_left		dw	
						? 
     116 028D  ????			p2_key_R		dw	
						? 
     117 028F  ????			p2_key_L		dw	
						? 
     118 0291  ????			p2_key_D		dw	
						? 
     119 0293  ????			p2_key_RR		dw	
						? 
     120 0295  ????			p2_key_LR		dw	
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-5


						? 
     121 0297  00			p2_pressing_R	db		0 
     122 0298  00			p2_pressing_L	db		0 
     123 0299  00			p2_pressing_D	db		0 
     124 029A  00			p2_pressing_RR	db		0 
     125 029B  00			p2_pressing_RL	db		0 
     126 029C  00			p2_moving_R		db	
						0 
     127 029D  00			p2_moving_L		db	
						0 
     128 029E  ????			p2_color		dw	
						? 
     129 02A0  00			p2_delay		db	
						0 
     130 02A1  ??			p2_shape		db	
						? 
     131 02A2  ??			p2_rotation		db	
						? 
     132 02A3  00D2[			p2_board		dw	
						210 dup (0) 
     133	   0000			
     134			 ]	
     135				
     136 0447  ??			p2_shape_X		db	
						? 
     137 0448  ??			p2_shape_Y		db	
						? 
     138 0449  0004[			p2_tiles_X		db	
						4 dup (?) 
     139	    ??			
     140			 ]	
     141				
     142 044D  0004[			p2_tiles_Y		db	
						4 dup (?) 
     143	    ??			
     144			 ]	
     145				
     146 0451  0004[			p2_pixel_positions		dw
							4 dup (?) 
     147	   ????			
     148			 ]	
     149				
     150 0459  ??			p2_speed		db	
						? 
     151 045A  ??			p2_speed_step	db		? 
     152 045B  00			p2_move_step	db		0 
     153 045C  ????????			p2_rand_number	dd		? 
     154 0460  ??			p2_next_shape	db		? 
     155 0461  01			p2_can_move_D	db		1 
     156				;#endregion 
     157 0462				variables endp 
     158				 
     159				; p1 and p2 will get the same 32 bit ra
					ndom number 
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-6


     160				; to calculate new random pieces, but t
					he same for each player 
     161 0462				start_random_numbers proc 
     162 0462  66| 50					push		eax 
     163 0464  51					push		cx 
     164 0465  52					push		dx 
     165				 
     166 0466  B4 2C					mov		
						ah, 2ch 
     167 0468  CD 21					int		
						21h		; ch=hours, cl=
					minutes, dh=seconds, dl=hundredths 
     168						 
     169 046A  66| B8 00000000				mov		
						eax, 0 
     170 0470  8B C2					mov		
						ax, dx 
     171 0472  B5 00					mov		
						ch, 0 
     172 0474  F7 E1					mul		
						cx 
     173 0476  66| C1 D0 10				rcl		
						eax, 16 
     174 047A  03 C1					add		
						ax, cx 
     175				 
     176 047C  81 C2 ABBA				add		
						dx, 0abbah 
     177 0480  81 C1 DEAD				add		
						cx, 0deadh 
     178 0484  81 F2 ACDC				xor		
						dx, 0acdch 
     179 0488  81 F1 0D1E				xor		
						cx, 0d1eh 
     180				 
     181 048C  66| C1 D0 0D				rcl		
						eax, 13 
     182 0490  33 C2					xor		
						ax, dx 
     183 0492  66| C1 D0 07				rcl		
						eax, 7 
     184 0496  33 C1					xor		
						ax, cx 
     185				 
     186 0498  2E: 66| A3 0283 R			mov		
						cs:p1_rand_number, eax 
     187 049D  2E: 66| A3 045C R			mov		
						cs:p2_rand_number, eax 
     188				 
     189 04A2  5A					pop		
						dx 
     190 04A3  59					pop		
						cx 
     191 04A4  66| 58					pop		
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-7


						eax 
     192 04A6  C3					ret 
     193 04A7				start_random_numbers endp 
     194				; most functions an argument ss:[bp+4] 
     195				; if [bp+4] == 1 then function works fo
					r player 1 
     196				; else it works for player 2 
     197 04A7				update_random_number proc 
     198 04A7  55					push		bp 
     199 04A8  8B EC					mov		
						bp, sp 
     200 04AA  66| 50					push		eax 
     201 04AC  53					push		bx 
     202				 
     203 04AD  80 7E 04 01				cmp		
						byte ptr ss:[bp+4], 1 
     204 04B1  0F 85 04BB R				jne		
						update_p2_number 
     205 04B5  BB 0283 R				mov		
						bx, offset cs:p1_rand_number 
     206 04B8  EB 04 90					jmp		
						start_updating_random_number 
     207 04BB				update_p2_number: 
     208 04BB  BB 045C R				mov		
						bx, offset cs:p2_rand_number 
     209 04BE				start_updating_random_number: 
     210 04BE  2E: 66| 8B 07				mov		
						eax, cs:[bx] 
     211 04C2  2E: 33 47 01				xor		
						ax, cs:[bx+1] 
     212 04C6  66| C1 C0 0E				rol		
						eax, 14			; just 
					doing something here 
     213 04CA  2E: 66| 03 07				add		
						eax, cs:[bx] 
     214 04CE  2E: 66| 89 07				mov		
						cs:[bx], eax 
     215				 
     216 04D2  5B					pop		
						bx 
     217 04D3  66| 58					pop		
						eax 
     218 04D5  5D					pop		
						bp 
     219 04D6  C3					ret 
     220 04D7				update_random_number endp 
     221				 
     222 04D7				keyboard_function proc 
     223 04D7  50					push		ax 
     224				 
     225 04D8  E4 60					in		
						al, 60h			; al = 
					scan code of pressed/released key
						 
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-8


     226 04DA  3C 4D					cmp		
						al, 77 
     227 04DC  0F 84 0568 R				je		
						p2_right_pressed 
     228 04E0  3C CD					cmp		
						al, 205 
     229 04E2  0F 84 0571 R				je		
						p2_right_released 
     230 04E6  3C 4B					cmp		
						al, 75 
     231 04E8  0F 84 0580 R				je		
						p2_left_pressed 
     232 04EC  3C CB					cmp		
						al, 203 
     233 04EE  0F 84 0589 R				je		
						p2_left_released 
     234 04F2  3C 50					cmp		
						al, 80 
     235 04F4  0F 84 0598 R				je		
						p2_down_pressed 
     236 04F8  3C D0					cmp		
						al, 208 
     237 04FA  0F 84 05AB R				je		
						p2_down_released 
     238 04FE  3C 48					cmp		
						al, 72 
     239 0500  0F 84 05BA R				je		
						p2_RR_pressed 
     240 0504  3C 35					cmp		
						al, 53 
     241 0506  0F 84 05BA R				je		
						p2_RR_pressed 
     242 050A  3C 34					cmp		
						al, 52 
     243 050C  0F 84 05C3 R				je		
						p2_RL_pressed 
     244 0510  3C 20					cmp		
						al, 32 
     245 0512  0F 84 05CC R				je		
						p1_right_pressed 
     246 0516  3C A0					cmp		
						al, 160 
     247 0518  0F 84 05D5 R				je		
						p1_right_released 
     248 051C  3C 1E					cmp		
						al, 30 
     249 051E  0F 84 05E4 R				je		
						p1_left_pressed 
     250 0522  3C 9E					cmp		
						al, 158 
     251 0524  0F 84 05ED R				je		
						p1_left_released 
     252 0528  3C 1F					cmp		
						al, 31 
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-9


     253 052A  0F 84 05FC R				je		
						p1_down_pressed 
     254 052E  3C 9F					cmp		
						al, 159 
     255 0530  0F 84 060F R				je		
						p1_down_released 
     256 0534  3C 11					cmp		
						al, 17 
     257 0536  0F 84 061E R				je		
						p1_RR_pressed 
     258 053A  3C 15					cmp		
						al, 21 
     259 053C  0F 84 061E R				je		
						p1_RR_pressed 
     260 0540  3C 14					cmp		
						al, 20 
     261 0542  0F 84 0627 R				je		
						p1_RL_pressed 
     262 0546  3C 39					cmp		
						al, 57 
     263 0548  0F 84 0630 R				je		
						space_pressed 
     264 054C  3C 01					cmp		
						al, 1 
     265 054E  0F 84 0657 R				je		
						escape_pressed 
     266 0552  3C 0B					cmp		
						al, 11 
     267 0554  0F 82 055B R				jb		
						number_pressed 
     268				 
     269 0558  E9 065D R				jmp		
						keyboard_function_end 
     270 055B				number_pressed: 
     271 055B  FE C8					dec		
						al 
     272 055D  2E: A2 0280 R				mov		
						cs:p1_speed, al 
     273 0561  2E: A2 0459 R				mov		
						cs:p2_speed, al 
     274 0565  E9 065D R				jmp		
						keyboard_function_end 
     275 0568				p2_right_pressed: 
     276 0568  2E: C6 06 0297 R 01			mov		
						byte ptr cs:p2_pressing_R, 1 
     277 056E  E9 065D R				jmp		
						keyboard_function_end 
     278 0571				p2_right_released: 
     279 0571  2E: C6 06 0297 R 00			mov		
						byte ptr cs:p2_pressing_R, 0 
     280 0577  2E: C6 06 029C R 00			mov		
						byte ptr cs:p2_moving_R, 0 
     281 057D  E9 065D R				jmp		
						keyboard_function_end 
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-10


     282 0580				p2_left_pressed: 
     283 0580  2E: C6 06 0298 R 01			mov		
						byte ptr cs:p2_pressing_L, 1 
     284 0586  E9 065D R				jmp		
						keyboard_function_end 
     285 0589				p2_left_released: 
     286 0589  2E: C6 06 0298 R 00			mov		
						byte ptr cs:p2_pressing_L, 0 
     287 058F  2E: C6 06 029D R 00			mov		
						byte ptr cs:p2_moving_L, 0 
     288 0595  E9 065D R				jmp		
						keyboard_function_end 
     289 0598				p2_down_pressed: 
     290 0598  2E: 80 3E 0461 R 01			cmp		
						byte ptr cs:p2_can_move_D, 1 
     291 059E  0F 85 065D R				jne		
						keyboard_function_end 
     292 05A2  2E: C6 06 0299 R 01			mov		
						byte ptr cs:p2_pressing_D, 1 
     293 05A8  E9 065D R				jmp		
						keyboard_function_end 
     294 05AB				p2_down_released: 
     295 05AB  2E: C6 06 0461 R 01			mov		
						byte ptr cs:p2_can_move_D, 1 
     296 05B1  2E: C6 06 0299 R 00			mov		
						byte ptr cs:p2_pressing_D, 0 
     297 05B7  E9 065D R				jmp		
						keyboard_function_end 
     298 05BA				p2_RR_pressed: 
     299 05BA  2E: C6 06 029A R 01			mov		
						byte ptr cs:p2_pressing_RR, 1 
     300 05C0  E9 065D R				jmp		
						keyboard_function_end 
     301 05C3				p2_RL_pressed: 
     302 05C3  2E: C6 06 029B R 01			mov		
						byte ptr cs:p2_pressing_RL, 1 
     303 05C9  E9 065D R				jmp		
						keyboard_function_end 
     304 05CC				p1_right_pressed: 
     305 05CC  2E: C6 06 00BE R 01			mov		
						byte ptr cs:p1_pressing_R, 1 
     306 05D2  E9 065D R				jmp		
						keyboard_function_end 
     307 05D5				p1_right_released: 
     308 05D5  2E: C6 06 00BE R 00			mov		
						byte ptr cs:p1_pressing_R, 0 
     309 05DB  2E: C6 06 00C3 R 00			mov		
						byte ptr cs:p1_moving_R, 0 
     310 05E1  EB 7A 90					jmp		
						keyboard_function_end 
     311 05E4				p1_left_pressed: 
     312 05E4  2E: C6 06 00BF R 01			mov		
						byte ptr cs:p1_pressing_L, 1 
     313 05EA  EB 71 90					jmp		
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-11


						keyboard_function_end 
     314 05ED				p1_left_released: 
     315 05ED  2E: C6 06 00BF R 00			mov		
						byte ptr cs:p1_pressing_L, 0 
     316 05F3  2E: C6 06 00C4 R 00			mov		
						byte ptr cs:p1_moving_L, 0 
     317 05F9  EB 62 90					jmp		
						keyboard_function_end 
     318 05FC				p1_down_pressed: 
     319 05FC  2E: 80 3E 0288 R 01			cmp		
						byte ptr cs:p1_can_move_D, 1 
     320 0602  0F 85 065D R				jne		
						keyboard_function_end 
     321 0606  2E: C6 06 00C0 R 01			mov		
						byte ptr cs:p1_pressing_D, 1 
     322 060C  EB 4F 90					jmp		
						keyboard_function_end 
     323 060F				p1_down_released: 
     324 060F  2E: C6 06 0288 R 01			mov		
						byte ptr cs:p1_can_move_D, 1 
     325 0615  2E: C6 06 00C0 R 00			mov		
						byte ptr cs:p1_pressing_D, 0 
     326 061B  EB 40 90					jmp		
						keyboard_function_end 
     327 061E				p1_RR_pressed: 
     328 061E  2E: C6 06 00C1 R 01			mov		
						byte ptr cs:p1_pressing_RR, 1 
     329 0624  EB 37 90					jmp		
						keyboard_function_end 
     330 0627				p1_RL_pressed: 
     331 0627  2E: C6 06 00C2 R 01			mov		
						byte ptr cs:p1_pressing_RL, 1 
     332 062D  EB 2E 90					jmp		
						keyboard_function_end 
     333 0630				space_pressed: 
     334 0630  2E: A0 0280 R				mov 		al, p1_
					speed 
     335 0634  2E: 8A 26 0459 R				mov   		ah, p2_
					speed 
     336 0639  2E: C6 06 0281 R 14			mov		
						byte ptr cs:p1_speed_step, 20 
     337 063F  2E: C6 06 045A R 14			mov		
						byte ptr cs:p2_speed_step, 20 
     338 0645  E8 0CE1 R				call		clear_b
					oards 
     339 0648  E8 12A5 R				call		game_in
					it 
     340 064B  2E: A2 0280 R				mov 		p1_spee
					d, al 
     341 064F  2E: 88 26 0459 R				mov 		p2_spee
					d, ah 
     342 0654  EB 07 90					jmp		
						keyboard_function_end 
     343 0657				escape_pressed: 
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-12


     344 0657  2E: C6 06 0009 R 01			mov		
						byte ptr cs:game_over, 1 
     345 065D				keyboard_function_end: 
     346 065D  58					pop		
						ax 
     347 065E  2E: FF 2E 0005 R				jmp		
						dword ptr cs:vector9 
     348 0663  C3					ret 
     349 0664				keyboard_function endp 
     350				 
     351 0664				clock_function proc 
     352 0664  55					push		bp 
     353 0665  8B EC					mov		
						bp, sp 
     354 0667  51					push		cx 
     355				 
     356 0668  2E: 80 3E 00C1 R 01			cmp		
						byte ptr cs:p1_pressing_RR, 1 
     357 066E  0F 85 0681 R				jne		
						check_p1_RL 
     358 0672  2E: C6 06 00C1 R 00			mov		
						byte ptr cs:p1_pressing_RR, 0
							; set to 0 in order to 
					prevent double rotation from one button
					 press 
     359 0678  68 0101					push		0101h
							; 8bit = 1/-1 -> left/r
					ight, 8bit = 1/2 -> player1/player2 
     360 067B  E8 08C0 R				call		rotate 
     361 067E  83 C4 02					add		
						sp, 2 
     362 0681				check_p1_RL: 
     363 0681  2E: 80 3E 00C2 R 01			cmp		
						byte ptr cs:p1_pressing_RL, 1 
     364 0687  0F 85 069A R				jne		
						check_p2_RR 
     365 068B  2E: C6 06 00C2 R 00			mov		
						byte ptr cs:p1_pressing_RL, 0 
     366 0691  68 FF01					push		0ff01h 
     367 0694  E8 08C0 R				call		rotate 
     368 0697  83 C4 02					add		
						sp, 2 
     369 069A				check_p2_RR: 
     370 069A  2E: 80 3E 029A R 01			cmp		
						byte ptr cs:p2_pressing_RR, 1 
     371 06A0  0F 85 06B3 R				jne		
						check_p2_RL 
     372 06A4  2E: C6 06 029A R 00			mov		
						byte ptr cs:p2_pressing_RR, 0 
     373 06AA  68 0102					push		0102h 
     374 06AD  E8 08C0 R				call		rotate 
     375 06B0  83 C4 02					add		
						sp, 2 
     376 06B3				check_p2_RL: 
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-13


     377 06B3  2E: 80 3E 029B R 01			cmp		
						byte ptr cs:p2_pressing_RL, 1 
     378 06B9  0F 85 06CC R				jne		
						check_p1_delay 
     379 06BD  2E: C6 06 029B R 00			mov		
						byte ptr cs:p2_pressing_RL, 0 
     380 06C3  68 FF02					push		0ff02h 
     381 06C6  E8 08C0 R				call		rotate 
     382 06C9  83 C4 02					add		
						sp, 2 
     383				 
     384					; when pressing right/left key 
					for the first time 
     385					; piece moves one step, waits a
					 couple of frames 
     386					; and then moves each 2 frames.
					 thats why there is delay 
     387				 
     388 06CC				check_p1_delay: 
     389 06CC  2E: 80 3E 00C7 R 00			cmp		
						byte ptr cs:p1_delay, 0 
     390 06D2  0F 84 06DB R				je		
						check_p2_delay 
     391 06D6  2E: FE 0E 00C7 R				dec		
						byte ptr cs:p1_delay 
     392 06DB				check_p2_delay: 
     393 06DB  2E: 80 3E 02A0 R 00			cmp		
						byte ptr cs:p2_delay, 0 
     394 06E1  0F 84 06EA R				je		
						checked_p2_delay 
     395 06E5  2E: FE 0E 02A0 R				dec		
						byte ptr cs:p2_delay 
     396 06EA				checked_p2_delay: 
     397						; checking if pressing 
					right key means something like this: 
     398						; if (pressing_R && !mo
					ving_R || pressing_R && !delay) { 
     399						;		(moving
					_R) ? delay=2 : delay=5 ; 
     400						;		moving_
					R = 1; 
     401						;		move_ri
					ght(); } 
     402 06EA  2E: 80 3E 00BE R 01			cmp		
						byte ptr cs:p1_pressing_R, 1 
     403 06F0  0F 85 0729 R				jne		
						p1_is_not_pressing_R 
     404 06F4  2E: 80 3E 00C3 R 01			cmp		
						byte ptr cs:p1_moving_R, 1
							; moving_R is set to 1 
					after making first step, and to 0 after
					 releasing key 
     405 06FA  0F 84 0716 R				je		
						p1_keep_pressing_R 
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-14


     406 06FE  2E: C6 06 00C7 R 03			mov		
						byte ptr cs:p1_delay, 3	
						; that's the delay after first 
					step 
     407 0704  2E: C6 06 00C3 R 01			mov		
						byte ptr cs:p1_moving_R, 1 
     408 070A  68 0001					push		word pt
					r 1		; p1_right_key was just
					 pressed 
     409 070D  E8 0AF0 R				call		move_ri
					ght 
     410 0710  83 C4 02					add		
						sp, 2 
     411 0713  EB 53 90					jmp		
						p1_is_not_pressing_L 
     412 0716				p1_keep_pressing_R: 
     413 0716  2E: 80 3E 00C7 R 00			cmp		
						byte ptr cs:p1_delay, 0 
     414 071C  0F 85 0768 R				jne		
						p1_is_not_pressing_L 
     415 0720  68 0001					push		word pt
					r 1 
     416 0723  E8 0AF0 R				call		move_ri
					ght 
     417 0726  83 C4 02					add		
						sp, 2 
     418 0729				p1_is_not_pressing_R: 
     419 0729  2E: 80 3E 00BF R 01			cmp		
						byte ptr cs:p1_pressing_L, 1 
     420 072F  0F 85 0768 R				jne		
						p1_is_not_pressing_L 
     421 0733  2E: 80 3E 00C4 R 01			cmp		
						byte ptr cs:p1_moving_L, 1 
     422 0739  0F 84 0755 R				je		
						p1_keep_pressing_L 
     423 073D  2E: C6 06 00C7 R 03			mov		
						byte ptr cs:p1_delay, 3 
     424 0743  2E: C6 06 00C4 R 01			mov		
						byte ptr cs:p1_moving_L, 1 
     425 0749  68 0001					push		word pt
					r 1 
     426 074C  E8 0B7B R				call		move_le
					ft 
     427 074F  83 C4 02					add		
						sp, 2 
     428 0752  EB 14 90					jmp		
						p1_is_not_pressing_L 
     429 0755				p1_keep_pressing_L: 
     430 0755  2E: 80 3E 00C7 R 00			cmp		
						byte ptr cs:p1_delay, 0 
     431 075B  0F 85 0768 R				jne		
						p1_is_not_pressing_L 
     432 075F  68 0001					push		word pt
					r 1 
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-15


     433 0762  E8 0B7B R				call		move_le
					ft 
     434 0765  83 C4 02					add		
						sp, 2 
     435 0768				p1_is_not_pressing_L: 
     436 0768  2E: 80 3E 0297 R 01			cmp		
						byte ptr cs:p2_pressing_R, 1 
     437 076E  0F 85 07A7 R				jne		
						p2_is_not_pressing_R 
     438 0772  2E: 80 3E 029C R 01			cmp		
						byte ptr cs:p2_moving_R, 1 
     439 0778  0F 84 0794 R				je		
						p2_keep_pressing_R 
     440 077C  2E: C6 06 02A0 R 03			mov		
						byte ptr cs:p2_delay, 3 
     441 0782  2E: C6 06 029C R 01			mov		
						byte ptr cs:p2_moving_R, 1 
     442 0788  68 0002					push		word pt
					r 2 
     443 078B  E8 0AF0 R				call		move_ri
					ght 
     444 078E  83 C4 02					add		
						sp, 2 
     445 0791  EB 53 90					jmp		
						p2_is_not_pressing_L 
     446 0794				p2_keep_pressing_R: 
     447 0794  2E: 80 3E 02A0 R 00			cmp		
						byte ptr cs:p2_delay, 0 
     448 079A  0F 85 07E6 R				jne		
						p2_is_not_pressing_L 
     449 079E  68 0002					push		word pt
					r 2 
     450 07A1  E8 0AF0 R				call		move_ri
					ght 
     451 07A4  83 C4 02					add		
						sp, 2 
     452 07A7				p2_is_not_pressing_R: 
     453 07A7  2E: 80 3E 0298 R 01			cmp		
						byte ptr cs:p2_pressing_L, 1 
     454 07AD  0F 85 07E6 R				jne		
						p2_is_not_pressing_L 
     455 07B1  2E: 80 3E 029D R 01			cmp		
						byte ptr cs:p2_moving_L, 1 
     456 07B7  0F 84 07D3 R				je		
						p2_keep_pressing_L 
     457 07BB  2E: C6 06 02A0 R 03			mov		
						byte ptr cs:p2_delay, 3 
     458 07C1  2E: C6 06 029D R 01			mov		
						byte ptr cs:p2_moving_L, 1 
     459 07C7  68 0002					push		word pt
					r 2 
     460 07CA  E8 0B7B R				call		move_le
					ft 
     461 07CD  83 C4 02					add		
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-16


						sp, 2 
     462 07D0  EB 14 90					jmp		
						p2_is_not_pressing_L 
     463 07D3				p2_keep_pressing_L: 
     464 07D3  2E: 80 3E 02A0 R 00			cmp		
						byte ptr cs:p2_delay, 0 
     465 07D9  0F 85 07E6 R				jne		
						p2_is_not_pressing_L 
     466 07DD  68 0002					push		word pt
					r 2 
     467 07E0  E8 0B7B R				call		move_le
					ft 
     468 07E3  83 C4 02					add		
						sp, 2 
     469 07E6				p2_is_not_pressing_L: 
     470				 
     471 07E6  2E: 80 3E 00C0 R 01			cmp		
						byte ptr cs:p1_pressing_D, 1 
     472 07EC  0F 85 07F6 R				jne		
						check_p2_down 
     473 07F0  2E: C6 06 0281 R 01			mov		
						byte ptr cs:p1_speed_step, 1 
     474 07F6				check_p2_down: 
     475 07F6  2E: 80 3E 0299 R 01			cmp		
						byte ptr cs:p2_pressing_D, 1 
     476 07FC  0F 85 0806 R				jne		
						checked_pressing_down 
     477 0800  2E: C6 06 045A R 01			mov		
						byte ptr cs:p2_speed_step, 1 
     478 0806				checked_pressing_down: 
     479				 
     480 0806  2E: 80 2E 0281 R 01			sub		
						byte ptr cs:p1_speed_step, 1 
     481 080C  0F 85 0835 R				jnz		
						skip_p1_falling 
     482 0810  2E: 8A 0E 0280 R				mov		
						cl, cs:p1_speed 
     483 0815  2E: 88 0E 0281 R				mov		
						cs:p1_speed_step, cl 
     484 081A  68 0001					push		word pt
					r 1 
     485 081D  E8 0F64 R				call		erase_s
					hape 
     486 0820  83 C4 02					add		
						sp, 2 
     487 0823  68 0001					push		word pt
					r 1 
     488 0826  E8 0C07 R				call		gravita
					tion 
     489 0829  83 C4 02					add		
						sp, 2 
     490 082C  68 0001					push		word pt
					r 1 
     491 082F  E8 0DE6 R				call		draw_sh
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-17


					ape 
     492 0832  83 C4 02					add		
						sp, 2 
     493 0835				skip_p1_falling: 
     494 0835  2E: 80 2E 045A R 01			sub		
						byte ptr cs:p2_speed_step, 1 
     495 083B  0F 85 0864 R				jnz		
						skip_p2_falling 
     496 083F  2E: 8A 0E 0459 R				mov		
						cl, cs:p2_speed 
     497 0844  2E: 88 0E 045A R				mov		
						cs:p2_speed_step, cl 
     498 0849  68 0002					push		word pt
					r 2 
     499 084C  E8 0F64 R				call		erase_s
					hape 
     500 084F  83 C4 02					add		
						sp, 2 
     501 0852  68 0002					push		word pt
					r 2 
     502 0855  E8 0C07 R				call		gravita
					tion 
     503 0858  83 C4 02					add		
						sp, 2 
     504 085B  68 0002					push		word pt
					r 2 
     505 085E  E8 0DE6 R				call		draw_sh
					ape 
     506 0861  83 C4 02					add		
						sp, 2 
     507 0864				skip_p2_falling: 
     508				 
     509 0864  59					pop		
						cx 
     510 0865  5D					pop		
						bp 
     511 0866  2E: FF 2E 0001 R				jmp		
						dword ptr cs:vector8 
     512 086B  C3					ret 
     513 086C				clock_function endp 
     514				 
     515 086C				draw_mini_grid proc 
     516 086C  50					push		ax 
     517 086D  53					push		bx 
     518 086E  51					push		cx 
     519 086F  52					push		dx 
     520 0870  56					push		si 
     521 0871  06					push		es 
     522					;this function was used in the 
					beginning to print board arrays for p1 
					and p2 
     523 0872  B8 A000					mov		
						ax, 0a000h 
     524 0875  8E C0					mov		
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-18


						es, ax 
     525				 
     526 0877  BE 00CA R				mov		
						si, offset p1_board 
     527				 
     528 087A  BA 0015					mov		
						dx, 21 
     529 087D  BB 0D16					mov		
						bx, 3350 
     530 0880				p1_grid_y: 
     531 0880  B9 000A					mov		
						cx, 10 
     532 0883				p1_grid_x: 
     533 0883  2E: 8A 04				mov		
						al, byte ptr cs:[si] 
     534 0886  26: 88 07				mov		
						es:[bx], al 
     535 0889  83 C6 02					add		
						si, 2 
     536 088C  43					inc		
						bx 
     537 088D  E2 F4					loop		p1_grid
					_x 
     538 088F  81 C3 0136				add		
						bx, 310 
     539 0893  83 EA 01					sub		
						dx, 1 
     540 0896  75 E8					jnz		
						p1_grid_y 
     541				 
     542 0898  BE 02A3 R				mov		
						si, offset p2_board 
     543 089B  BA 0015					mov		
						dx, 21 
     544 089E  BB 3296					mov		
						bx, 12950 
     545 08A1				p2_grid_y: 
     546 08A1  B9 000A					mov		
						cx, 10 
     547 08A4				p2_grid_x: 
     548 08A4  2E: 8A 04				mov		
						al, byte ptr cs:[si] 
     549 08A7  26: 88 07				mov		
						es:[bx], al 
     550 08AA  83 C6 02					add		
						si, 2 
     551 08AD  43					inc		
						bx 
     552 08AE  E2 F4					loop		p2_grid
					_x 
     553 08B0  81 C3 0136				add		
						bx, 310 
     554 08B4  83 EA 01					sub		
						dx, 1 
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-19


     555 08B7  75 E8					jnz		
						p2_grid_y 
     556				 
     557 08B9  07					pop		
						es 
     558 08BA  5E					pop		
						si 
     559 08BB  5A					pop		
						dx 
     560 08BC  59					pop		
						cx 
     561 08BD  5B					pop		
						bx 
     562 08BE  58					pop		
						ax 
     563 08BF  C3					ret 
     564 08C0				draw_mini_grid endp 
     565				 
     566 08C0				rotate proc 
     567 08C0  55					push		bp 
     568 08C1  8B EC					mov		
						bp, sp 
     569 08C3  83 EC 0A					sub		
						sp, 10 
     570					;ss:[bp-4] = new coordinates_X 
     571					;ss:[bp-8] = new coordinates_Y 
     572					;ss:[bp-9] = new rotation 
     573					;ss:[bp+4] = 1/2   ->   player1
					/2 rotating 
     574					;ss:[bp+5] = 1/-1   ->  right/l
					eft 
     575 08C6  66| 50					push		eax 
     576 08C8  53					push		bx 
     577 08C9  51					push		cx 
     578 08CA  52					push		dx 
     579 08CB  57					push		di 
     580 08CC  56					push		si 
     581				 
     582 08CD  80 7E 04 01				cmp		
						byte ptr ss:[bp+4], 1 
     583 08D1  0F 85 08DE R				jne		
						p2_rotating 
     584 08D5  BB 026E R				mov		
						bx, offset p1_shape_X 
     585 08D8  BE 00CA R				mov		
						si, offset p1_board 
     586 08DB  EB 07 90					jmp		
						start_rotating 
     587 08DE				p2_rotating: 
     588 08DE  BB 0447 R				mov		
						bx, offset p2_shape_X 
     589 08E1  BE 02A3 R				mov		
						si, offset p2_board 
     590 08E4				start_rotating: 
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-20


     591					; rotating in a nutshell: 
     592					; what is the shape? 
     593					; how is it rotated now? 
     594					; remember the offset of coordi
					nates of new rotated shape (and also th
					e step of rotation) 
     595					; add current shape offset and 
					check if rotation doesn't hit any tiles
					 
     596					; if no, update coordinates to 
					new rotated ones 
     597					; 200 lines, thank you, probabl
					y (definitely) could be (much) fewer  
     598 08E4  2E: 80 BF FE5A 00			cmp		
						byte ptr cs:[bx-422], 0 
     599 08EA  0F 84 0A38 R				je		
						rotating_I 
     600 08EE  2E: 80 BF FE5A 01			cmp		
						byte ptr cs:[bx-422], 1	
						; O shape, exit function 
     601 08F4  0F 84 0AE4 R				je		
						cant_rotate 
     602 08F8  2E: 80 BF FE5A 02			cmp		
						byte ptr cs:[bx-422], 2 
     603 08FE  0F 84 09CA R				je		
						rotating_T 
     604 0902  2E: 80 BF FE5A 03			cmp		
						byte ptr cs:[bx-422], 3 
     605 0908  0F 84 098E R				je		
						rotating_L 
     606 090C  2E: 80 BF FE5A 04			cmp		
						byte ptr cs:[bx-422], 4 
     607 0912  0F 84 0A06 R				je		
						rotating_Z 
     608 0916  2E: 80 BF FE5A 05			cmp		
						byte ptr cs:[bx-422], 5 
     609 091C  0F 84 0952 R				je		
						rotating_J 
     610						;cmp		
						byte ptr cs:[bx-422], 6 
     611						;je		
						rotating_S 
     612				;rotating_S: 
     613 0920  2E: 80 BF FE5B 00			cmp		
						byte ptr cs:[bx-421], 0	
						; what is current rotation stat
					e 
     614 0926  0F 85 0934 R				jne		
						rotating_S_1 
     615				;rotating_S_0: 
     616 092A  BF 0004					mov		
						di, 4 
     617 092D  C6 46 F7 01				mov		
						byte ptr ss:[bp-9], 1 
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-21


     618 0931  EB 08 90					jmp		
						set_S_coordinates 
     619 0934				rotating_S_1: 
     620 0934  BF 0000					mov		
						di, 0 
     621 0937  C6 46 F7 00				mov		
						byte ptr ss:[bp-9], 0 
     622 093B				set_S_coordinates: 
     623 093B  2E: 66| 8B 85 0090 R			mov		
						eax, cs:[shape_S_X+di] 
     624 0941  66| 89 46 FC				mov		
						ss:[bp-4], eax 
     625 0945  2E: 66| 8B 85 0098 R			mov		
						eax, cs:[shape_S_Y+di] 
     626 094B  66| 89 46 F8				mov		
						ss:[bp-8], eax 
     627 094F  E9 0A6A R				jmp		
						add_shape_offset 
     628						 
     629 0952				rotating_J: 
     630 0952  8A 46 05					mov		
						al, ss:[bp+5] 
     631 0955  2E: 02 87 FE5B				add		
						al, byte ptr cs:[bx-421] 
     632 095A  3C FF					cmp		
						al, -1 
     633 095C  0F 85 0965 R				jne		
						check_if_J_rotation_overflow 
     634 0960  B0 03					mov		
						al, 3 
     635 0962  EB 09 90					jmp		
						J_rotation_is_set 
     636 0965				check_if_J_rotation_overflow: 
     637 0965  3C 04					cmp		
						al, 4 
     638 0967  0F 85 096D R				jne		
						J_rotation_is_set 
     639 096B  B0 00					mov		
						al, 0 
     640 096D				J_rotation_is_set: 
     641 096D  88 46 F7					mov		
						byte ptr ss:[bp-9], al 
     642 0970  0F B6 7E F7				movzx		di, byt
					e ptr ss:[bp-9] 
     643 0974  C1 E7 02					shl		
						di, 2 
     644 0977  2E: 66| 8B 85 0070 R			mov		
						eax, cs:[shape_J_X+di] 
     645 097D  66| 89 46 FC				mov		
						ss:[bp-4], eax 
     646 0981  2E: 66| 8B 85 0080 R			mov		
						eax, cs:[shape_J_Y+di] 
     647 0987  66| 89 46 F8				mov		
						ss:[bp-8], eax 
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-22


     648 098B  E9 0A6A R				jmp		
						add_shape_offset	
						 
     649 098E				rotating_L: 
     650 098E  8A 46 05					mov		
						al, ss:[bp+5] 
     651 0991  2E: 02 87 FE5B				add		
						al, byte ptr cs:[bx-421] 
     652 0996  3C FF					cmp		
						al, -1 
     653 0998  0F 85 09A1 R				jne		
						check_if_L_rotation_overflow 
     654 099C  B0 03					mov		
						al, 3 
     655 099E  EB 09 90					jmp		
						L_rotation_is_set 
     656 09A1				check_if_L_rotation_overflow: 
     657 09A1  3C 04					cmp		
						al, 4 
     658 09A3  0F 85 09A9 R				jne		
						L_rotation_is_set 
     659 09A7  B0 00					mov		
						al, 0 
     660 09A9				L_rotation_is_set: 
     661 09A9  88 46 F7					mov		
						byte ptr ss:[bp-9], al 
     662 09AC  0F B6 7E F7				movzx		di, byt
					e ptr ss:[bp-9] 
     663 09B0  C1 E7 02					shl		
						di, 2 
     664 09B3  2E: 66| 8B 85 0050 R			mov		
						eax, cs:[shape_L_X+di] 
     665 09B9  66| 89 46 FC				mov		
						ss:[bp-4], eax 
     666 09BD  2E: 66| 8B 85 0060 R			mov		
						eax, cs:[shape_L_Y+di] 
     667 09C3  66| 89 46 F8				mov		
						ss:[bp-8], eax 
     668 09C7  E9 0A6A R				jmp		
						add_shape_offset 
     669 09CA				rotating_T: 
     670 09CA  8A 46 05					mov		
						al, ss:[bp+5] 
     671 09CD  2E: 02 87 FE5B				add		
						al, byte ptr cs:[bx-421] 
     672 09D2  3C FF					cmp		
						al, -1 
     673 09D4  0F 85 09DD R				jne		
						check_if_T_rotation_overflow 
     674 09D8  B0 03					mov		
						al, 3 
     675 09DA  EB 09 90					jmp		
						T_rotation_is_set 
     676 09DD				check_if_T_rotation_overflow: 
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-23


     677 09DD  3C 04					cmp		
						al, 4 
     678 09DF  0F 85 09E5 R				jne		
						T_rotation_is_set 
     679 09E3  B0 00					mov		
						al, 0 
     680 09E5				T_rotation_is_set: 
     681 09E5  88 46 F7					mov		
						byte ptr ss:[bp-9], al 
     682 09E8  0F B6 7E F7				movzx		di, byt
					e ptr ss:[bp-9] 
     683 09EC  C1 E7 02					shl		
						di, 2 
     684 09EF  2E: 66| 8B 85 0030 R			mov		
						eax, cs:[shape_T_X+di] 
     685 09F5  66| 89 46 FC				mov		
						ss:[bp-4], eax 
     686 09F9  2E: 66| 8B 85 0040 R			mov		
						eax, cs:[shape_T_Y+di] 
     687 09FF  66| 89 46 F8				mov		
						ss:[bp-8], eax 
     688 0A03  EB 65 90					jmp		
						add_shape_offset 
     689 0A06				rotating_Z: 
     690 0A06  2E: 80 BF FE5B 00			cmp		
						byte ptr cs:[bx-421], 0 
     691 0A0C  0F 85 0A1A R				jne		
						rotating_Z_1 
     692				;rotating_Z_0: 
     693 0A10  BF 0004					mov		
						di, 4 
     694 0A13  C6 46 F7 01				mov		
						byte ptr ss:[bp-9], 1 
     695 0A17  EB 08 90					jmp		
						set_Z_coordinates 
     696 0A1A				rotating_Z_1: 
     697 0A1A  BF 0000					mov		
						di, 0 
     698 0A1D  C6 46 F7 00				mov		
						byte ptr ss:[bp-9], 0 
     699 0A21				set_Z_coordinates: 
     700 0A21  2E: 66| 8B 85 00A0 R			mov		
						eax, cs:[shape_Z_X+di] 
     701 0A27  66| 89 46 FC				mov		
						ss:[bp-4], eax 
     702 0A2B  2E: 66| 8B 85 00A8 R			mov		
						eax, cs:[shape_Z_Y+di] 
     703 0A31  66| 89 46 F8				mov		
						ss:[bp-8], eax 
     704 0A35  EB 33 90					jmp		
						add_shape_offset 
     705 0A38				rotating_I: 
     706 0A38  2E: 80 BF FE5B 00			cmp		
						byte ptr cs:[bx-421], 0 
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-24


     707 0A3E  0F 85 0A4C R				jne		
						rotating_I_1 
     708				;rotating_I_0: 
     709 0A42  BF 0004					mov		
						di, 4 
     710 0A45  C6 46 F7 01				mov		
						byte ptr ss:[bp-9], 1 
     711 0A49  EB 08 90					jmp		
						set_I_coordinates 
     712 0A4C				rotating_I_1: 
     713 0A4C  BF 0000					mov		
						di, 0 
     714 0A4F  C6 46 F7 00				mov		
						byte ptr ss:[bp-9], 0 
     715 0A53				set_I_coordinates: 
     716 0A53  2E: 66| 8B 85 0020 R			mov		
						eax, cs:[shape_I_X+di] 
     717 0A59  66| 89 46 FC				mov		
						ss:[bp-4], eax 
     718 0A5D  2E: 66| 8B 85 0028 R			mov		
						eax, cs:[shape_I_Y+di] 
     719 0A63  66| 89 46 F8				mov		
						ss:[bp-8], eax 
     720 0A67  EB 01 90					jmp		
						add_shape_offset 
     721 0A6A				add_shape_offset: 
     722 0A6A  BF 0004					mov		
						di, 4 
     723 0A6D  2E: 8A 07				mov		
						al, cs:[bx] 
     724 0A70  2E: 8A 67 01				mov		
						ah, cs:[bx+1] 
     725 0A74						adding_shape_offset_loo
					p: 
     726 0A74  00 43 FB					add		
						ss:[bp+di-5], al	
							; increase new coordina
					te X 
     727 0A77  00 63 F7					add		
						ss:[bp+di-9], ah	
							; increase new coordina
					te Y 
     728 0A7A  80 7B FB 00				cmp		
						byte ptr ss:[bp+di-5], 0
						; if x<0 or x>9 
     729 0A7E  0F 82 0AE4 R				jb		
						cant_rotate 
     730 0A82  80 7B FB 0A				cmp		
						byte ptr ss:[bp+di-5], 10 
     731 0A86  0F 83 0AE4 R				jae		
						cant_rotate 
     732 0A8A  80 7B F7 15				cmp		
						byte ptr ss:[bp+di-9], 21 
     733 0A8E  0F 83 0AE4 R				jae		
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-25


						cant_rotate 
     734 0A92  83 EF 01					sub		
						di, 1 
     735 0A95  75 DD					jnz		
						adding_shape_offset_loop 
     736				 
     737 0A97  BF 0004					mov		
						di, 4 
     738 0A9A				checking_if_can_rotate: 
     739 0A9A  0F B6 43 F7				movzx		ax, byt
					e ptr ss:[bp+di-9] 
     740 0A9E  B1 0A					mov		
						cl, 10 
     741 0AA0  F6 E1					mul		
						cl 
     742 0AA2  8A 4B FB					mov		
						cl, ss:[bp+di-5] 
     743 0AA5  03 C1					add		
						ax, cx 
     744 0AA7  D1 E0					shl		
						ax, 1 
     745 0AA9  93					xchg		ax, bx 
     746 0AAA  2E: 83 38 00				cmp		
						word ptr cs:[si+bx], 0 
     747 0AAE  93					xchg		ax, bx 
     748 0AAF  0F 85 0AE4 R				jne		
						cant_rotate 
     749 0AB3  83 EF 01					sub		
						di, 1 
     750 0AB6  75 E2					jnz		
						checking_if_can_rotate 
     751				;can_rotate: 
     752 0AB8  FF 76 04					push		word pt
					r ss:[bp+4] 
     753 0ABB  E8 0F64 R				call		erase_s
					hape 
     754 0ABE  83 C4 02					add		
						sp, 2 
     755				 
     756 0AC1  8A 46 F7					mov		
						al, ss:[bp-9] 
     757 0AC4  2E: 88 87 FE5B				mov		
						cs:[bx-421], al 
     758 0AC9  66| 8B 46 FC				mov		
						eax, ss:[bp-4] 
     759 0ACD  2E: 66| 89 47 02				mov		
						cs:[bx+2], eax 
     760 0AD2  66| 8B 46 F8				mov		
						eax, ss:[bp-8] 
     761 0AD6  2E: 66| 89 47 06				mov		
						cs:[bx+6], eax 
     762				 
     763 0ADB  FF 76 04					push		word pt
					r ss:[bp+4] 
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-26


     764 0ADE  E8 0DE6 R				call		draw_sh
					ape 
     765 0AE1  83 C4 02					add		
						sp, 2 
     766 0AE4				cant_rotate: 
     767 0AE4  5E					pop		
						si 
     768 0AE5  5F					pop		
						di 
     769 0AE6  5A					pop		
						dx 
     770 0AE7  59					pop		
						cx 
     771 0AE8  5B					pop		
						bx 
     772 0AE9  66| 58					pop		
						eax 
     773 0AEB  83 C4 0A					add		
						sp, 10 
     774 0AEE  5D					pop		
						bp 
     775 0AEF  C3					ret 
     776 0AF0				rotate endp 
     777				 
     778 0AF0				move_right proc 
     779 0AF0  55					push		bp 
     780 0AF1  8B EC					mov		
						bp, sp 
     781					;ss:[bp+4] = 1/2   ->   player1
					/2 falling 
     782 0AF3  50					push		ax 
     783 0AF4  53					push		bx 
     784 0AF5  51					push		cx 
     785 0AF6  56					push		si 
     786 0AF7  57					push		di 
     787 0AF8  80 7E 04 01				cmp		
						byte ptr ss:[bp+4], 1 
     788 0AFC  0F 85 0B09 R				jnz		
						moving_right_for_p2 
     789 0B00  BB 0270 R				mov		
						bx, offset p1_tiles_X 
     790 0B03  BE 00CA R				mov		
						si, offset p1_board 
     791 0B06  EB 07 90					jmp		
						start_moving_right 
     792 0B09				moving_right_for_p2:	 
     793 0B09  BB 0449 R				mov		
						bx, offset p2_tiles_X 
     794 0B0C  BE 02A3 R				mov		
						si, offset p2_board 
     795 0B0F				start_moving_right: 
     796 0B0F  BF 0004					mov		
						di, 4 
     797 0B12				check_if_hit_right_wall: 
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-27


     798 0B12  2E: 80 79 FF 09				cmp		
						byte ptr cs:[bx+di-1], 9
							; x3 == 9?, x2 == 9?, x
					1 == 9?, x0 == 9? 
     799 0B17  0F 84 0B74 R				je		
						the_end_of_moving_right 
     800 0B1B  83 EF 01					sub		
						di, 1 
     801 0B1E  75 F2					jnz		
						check_if_hit_right_wall 
     802				 
     803 0B20  BF 0004					mov		
						di, 4 
     804 0B23				check_if_hit_right_tile: 
     805 0B23  2E: 0F B6 41 03				movzx		ax, byt
					e ptr cs:[bx+di+3]		; board
					[x+1][y] = board[10*y + x+1]. ax=10*y+x
					+1 
     806 0B28  B1 0A					mov		
						cl, 10 
     807 0B2A  F6 E1					mul		
						cl 
     808 0B2C  2E: 8A 49 FF				mov		
						cl, cs:[bx+di-1] 
     809 0B30  FE C1					inc		
						cl 
     810 0B32  02 C1					add		
						al, cl 
     811 0B34  D1 E0					shl		
						ax, 1			
									; multi
					ply ax (board array index) * 2, because
					 board values are 16 bit 
     812 0B36  93					xchg		ax, bx 
     813 0B37  2E: 83 38 00				cmp		
						word ptr cs:[si+bx], 0 
     814 0B3B  93					xchg		ax, bx 
     815 0B3C  0F 85 0B6F R				jne		
						other_pieces_are_blocking_right
					 
     816 0B40  83 EF 01					sub		
						di, 1 
     817 0B43  75 DE					jnz		
						check_if_hit_right_tile 
     818				 
     819 0B45  FF 76 04					push		word pt
					r ss:[bp+4] 
     820 0B48  E8 0F64 R				call		erase_s
					hape 
     821 0B4B  83 C4 02					add		
						sp, 2 
     822				 
     823 0B4E  BF 0004					mov		
						di, 4 
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-28


     824 0B51				move_piece_right: 
     825 0B51  2E: FE 41 FF				inc		
						byte ptr cs:[bx+di-1] 
     826 0B55  83 EF 01					sub		
						di, 1 
     827 0B58  75 F7					jnz		
						move_piece_right 
     828 0B5A  2E: FE 47 FE				inc		
						byte ptr cs:[bx-2]	
							; shape_X++ 
     829				 
     830 0B5E  2E: 80 44 FD 02				add		
						byte ptr cs:[si-3], 2	
							; add delay, 2;   you c
					an move 1 step per 2 frames 
     831				 
     832 0B63  FF 76 04					push		word pt
					r ss:[bp+4] 
     833 0B66  E8 0DE6 R				call		draw_sh
					ape 
     834 0B69  83 C4 02					add		
						sp, 2 
     835 0B6C  EB 06 90					jmp		
						the_end_of_moving_right 
     836 0B6F				other_pieces_are_blocking_right: 
     837 0B6F  2E: C6 44 FD 00				mov		
						byte ptr cs:[si-3], 0	
							; mov delay, 0;   allow
					s you to make tucks easier 
     838 0B74				the_end_of_moving_right: 
     839				 
     840 0B74  5F					pop		
						di 
     841 0B75  5E					pop		
						si 
     842 0B76  59					pop		
						cx 
     843 0B77  5B					pop		
						bx 
     844 0B78  58					pop		
						ax 
     845 0B79  5D					pop		
						bp 
     846 0B7A  C3					ret 
     847 0B7B				move_right endp 
     848 0B7B				move_left proc 
     849 0B7B  55					push		bp 
     850 0B7C  8B EC					mov		
						bp, sp 
     851					;ss:[bp+4] = 1/2   ->   player1
					/2 falling 
     852 0B7E  50					push		ax 
     853 0B7F  53					push		bx 
     854 0B80  51					push		cx 
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-29


     855 0B81  56					push		si 
     856 0B82  57					push		di 
     857				 
     858 0B83  80 7E 04 01				cmp		
						byte ptr ss:[bp+4], 1 
     859 0B87  0F 85 0B94 R				jnz		
						moving_left_for_p2 
     860 0B8B  BB 0270 R				mov		
						bx, offset p1_tiles_X 
     861 0B8E  BE 00CA R				mov		
						si, offset p1_board 
     862 0B91  EB 07 90					jmp		
						start_moving_left 
     863 0B94				moving_left_for_p2:	 
     864 0B94  BB 0449 R				mov		
						bx, offset p2_tiles_X 
     865 0B97  BE 02A3 R				mov		
						si, offset p2_board 
     866 0B9A				start_moving_left: 
     867 0B9A  BF 0004					mov		
						di, 4 
     868 0B9D				check_if_hit_left_wall: 
     869 0B9D  2E: 80 79 FF 00				cmp		
						byte ptr cs:[bx+di-1], 0 
     870 0BA2  0F 84 0BFF R				je		
						the_end_of_moving_left 
     871 0BA6  83 EF 01					sub		
						di, 1 
     872 0BA9  75 F2					jnz		
						check_if_hit_left_wall 
     873				 
     874 0BAB  BF 0004					mov		
						di, 4 
     875 0BAE				check_if_hit_left_tile: 
     876 0BAE  2E: 0F B6 41 03				movzx		ax, byt
					e ptr cs:[bx+di+3] 
     877 0BB3  B1 0A					mov		
						cl, 10 
     878 0BB5  F6 E1					mul		
						cl 
     879 0BB7  2E: 8A 49 FF				mov		
						cl, cs:[bx+di-1] 
     880 0BBB  FE C9					dec		
						cl 
     881 0BBD  02 C1					add		
						al, cl 
     882 0BBF  D1 E0					shl		
						ax, 1 
     883 0BC1  93					xchg		ax, bx 
     884 0BC2  2E: 83 38 00				cmp		
						word ptr cs:[si+bx], 0 
     885 0BC6  93					xchg		ax, bx 
     886 0BC7  0F 85 0BFA R				jne		
						other_pieces_are_blocking_left 
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-30


     887 0BCB  83 EF 01					sub		
						di, 1 
     888 0BCE  75 DE					jnz		
						check_if_hit_left_tile 
     889						 
     890 0BD0  FF 76 04					push		word pt
					r ss:[bp+4] 
     891 0BD3  E8 0F64 R				call		erase_s
					hape 
     892 0BD6  83 C4 02					add		
						sp, 2 
     893				 
     894 0BD9  BF 0004					mov		
						di, 4 
     895 0BDC				move_piece_left: 
     896 0BDC  2E: FE 49 FF				dec		
						byte ptr cs:[bx+di-1] 
     897 0BE0  83 EF 01					sub		
						di, 1 
     898 0BE3  75 F7					jnz		
						move_piece_left 
     899 0BE5  2E: FE 4F FE				dec		
						byte ptr cs:[bx-2]	
							; shape_X-- 
     900				 
     901 0BE9  2E: 80 44 FD 02				add		
						byte ptr cs:[si-3], 2 
     902						 
     903 0BEE  FF 76 04					push		word pt
					r ss:[bp+4] 
     904 0BF1  E8 0DE6 R				call		draw_sh
					ape 
     905 0BF4  83 C4 02					add		
						sp, 2 
     906 0BF7  EB 06 90					jmp		
						the_end_of_moving_left 
     907 0BFA				other_pieces_are_blocking_left: 
     908 0BFA  2E: C6 44 FD 00				mov		
						byte ptr cs:[si-3], 0 
     909 0BFF				the_end_of_moving_left: 
     910				 
     911						 
     912				 
     913 0BFF  5F					pop		
						di 
     914 0C00  5E					pop		
						si 
     915 0C01  59					pop		
						cx 
     916 0C02  5B					pop		
						bx 
     917 0C03  58					pop		
						ax 
     918 0C04  5D					pop		
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-31


						bp 
     919 0C05  C3					ret 
     920 0C06  C3					ret 
     921 0C07				move_left endp 
     922 0C07				gravitation proc 
     923 0C07  55					push		bp 
     924 0C08  8B EC					mov		
						bp, sp 
     925					;ss:[bp+4] = 1/2   ->   player1
					/2 falling 
     926 0C0A  50					push		ax 
     927 0C0B  53					push		bx 
     928 0C0C  51					push		cx 
     929 0C0D  56					push		si 
     930 0C0E  57					push		di 
     931						 
     932 0C0F  FF 76 04					push		word pt
					r ss:[bp+4] 
     933 0C12  E8 0F64 R				call		erase_s
					hape 
     934 0C15  83 C4 02					add		
						sp, 2 
     935				 
     936 0C18  80 7E 04 01				cmp		
						byte ptr ss:[bp+4], 1 
     937 0C1C  0F 85 0C2F R				jnz		
						gravitation_for_p2 
     938 0C20  BB 0270 R				mov		
						bx, offset cs:p1_tiles_X 
     939 0C23  BE 00CA R				mov		
						si, offset cs:p1_board 
     940 0C26  2E: C6 06 0288 R 01			mov		
						byte ptr cs:p1_can_move_D, 1 
     941 0C2C  EB 0D 90					jmp		
						start_gravitation 
     942 0C2F				gravitation_for_p2:	 
     943 0C2F  BB 0449 R				mov		
						bx, offset cs:p2_tiles_X 
     944 0C32  BE 02A3 R				mov		
						si, offset cs:p2_board 
     945 0C35  2E: C6 06 0461 R 01			mov		
						byte ptr cs:p2_can_move_D, 1 
     946 0C3B				start_gravitation: 
     947 0C3B  BF 0004					mov		
						di, 4 
     948 0C3E				check_if_hit_bottom: 
     949 0C3E  2E: 80 79 03 14				cmp		
						byte ptr cs:[bx+di+3], 20
								; tiles_Y[3], t
					iles_Y[2], tiles_Y[1], tiles_Y[0] 
     950 0C43  0F 84 0C84 R				je		
						update_board_and_make_new_shape
					 
     951 0C47  83 EF 01					sub		
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-32


						di, 1 
     952 0C4A  75 F2					jnz		
						check_if_hit_bottom 
     953				 
     954 0C4C  BF 0004					mov		
						di, 4 
     955 0C4F				check_if_hit_tile: 
     956 0C4F  2E: 0F B6 41 03				movzx		ax, byt
					e ptr cs:[bx+di+3]		
						; tiles_Y[3], tiles_Y[2], tiles
					_Y[1], tiles_Y[0] 
     957 0C54  FE C0					inc		
						al 
     958 0C56  B1 0A					mov		
						cl, 10 
     959 0C58  F6 E1					mul		
						cl 
     960 0C5A  2E: 8A 49 FF				mov		
						cl, cs:[bx+di-1]	
									; tiles
					_X[3], ...[2], ...[1], ...[0] 
     961 0C5E  02 C1					add		
						al, cl 
     962 0C60  D1 E0					shl		
						ax, 1			
									
						; *2 because word = 2 bytes 
     963 0C62  93					xchg		ax, bx
									
									; bx = 
					y*10 + x = tile index in 1D array 
     964 0C63  2E: 83 38 00				cmp		
						word ptr cs:[si+bx], 0	
								; if 0 then the
					re is nothing under this tile 
     965 0C67  93					xchg		ax, bx 
     966 0C68  0F 85 0C84 R				jne		
						update_board_and_make_new_shape
					 
     967 0C6C  83 EF 01					sub		
						di, 1 
     968 0C6F  75 DE					jnz		
						check_if_hit_tile 
     969				 
     970 0C71  BF 0004					mov		
						di, 4			
						; if you are here then piece wi
					ll fall down 
     971 0C74				move_piece_down: 
     972 0C74  2E: FE 41 03				inc		
						byte ptr cs:[bx+di+3] 
     973 0C78  83 EF 01					sub		
						di, 1 
     974 0C7B  75 F7					jnz		
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-33


						move_piece_down 
     975 0C7D  2E: FE 47 FF				inc		
						byte ptr cs:[bx-1]	
							; shape_Y++ 
     976 0C81  EB 4E 90					jmp		
						gravitation_has_succeeded 
     977				 
     978 0C84				update_board_and_make_new_shape: 
     979 0C84  2E: C6 47 18 00				mov		
						byte ptr cs:[bx+24], 0	
							; can_move_down 
     980 0C89  2E: C6 87 FE50 00			mov		
						byte ptr cs:[bx-432], 0	
							; is_pressing_down 
     981 0C8F  2E: C6 44 FD 01				mov		
						byte ptr cs:[si-3], 1	
							; delay 0 
     982 0C94  BF 0004					mov		
						di, 4 
     983 0C97				engraving_the_boad_array: 
     984 0C97  2E: 0F B6 41 03				movzx		ax, byt
					e ptr cs:[bx+di+3]		
						; tiles_Y[3], tiles_Y[2], tiles
					_Y[1], tiles_Y[0] 
     985 0C9C  B1 0A					mov		
						cl, 10 
     986 0C9E  F6 E1					mul		
						cl 
     987 0CA0  2E: 8A 49 FF				mov		
						cl, cs:[bx+di-1]	
									; tiles
					_X[3], ...[2], ...[1], ...[0] 
     988 0CA4  02 C1					add		
						al, cl 
     989 0CA6  D1 E0					shl		
						ax, 1 
     990 0CA8  93					xchg		ax, bx
									
									; bx = 
					y*10 + x = tile index in 1D array 
     991 0CA9  2E: 8B 4C FB				mov		
						cx, cs:[si-5]		
									; tile_
					color 
     992 0CAD  2E: 89 08				mov		
						cs:[si+bx], cx	 
     993 0CB0  93					xchg		ax, bx 
     994 0CB1  83 EF 01					sub		
						di, 1 
     995 0CB4  75 E1					jnz		
						engraving_the_boad_array 
     996				 
     997 0CB6  FF 76 04					push		word pt
					r ss:[bp+4] 
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-34


     998 0CB9  E8 0D1F R				call		clear_l
					ines 
     999 0CBC  83 C4 02					add		
						sp, 2 
    1000 0CBF  FF 76 04					push		word pt
					r ss:[bp+4] 
    1001 0CC2  E8 111A R				call		draw_bo
					ard 
    1002 0CC5  83 C4 02					add		
						sp, 2 
    1003 0CC8  FF 76 04					push		word pt
					r ss:[bp+4] 
    1004 0CCB  E8 0FAD R				call		make_ne
					w_shape 
    1005 0CCE  83 C4 02					add		
						sp, 2 
    1006 0CD1				gravitation_has_succeeded: 
    1007						 
    1008 0CD1  FF 76 04					push		word pt
					r ss:[bp+4] 
    1009 0CD4  E8 0DE6 R				call		draw_sh
					ape 
    1010 0CD7  83 C4 02					add		
						sp, 2 
    1011				 
    1012 0CDA  5F					pop		
						di 
    1013 0CDB  5E					pop		
						si 
    1014 0CDC  59					pop		
						cx 
    1015 0CDD  5B					pop		
						bx 
    1016 0CDE  58					pop		
						ax 
    1017 0CDF  5D					pop		
						bp 
    1018 0CE0  C3					ret 
    1019 0CE1				gravitation endp 
    1020				 
    1021 0CE1				clear_boards proc 
    1022 0CE1  50					push		ax 
    1023 0CE2  53					push		bx 
    1024 0CE3  51					push		cx 
    1025				 
    1026 0CE4  B0 02					mov		
						al, 2 
    1027 0CE6  BB 0000					mov		
						bx, 0 
    1028 0CE9				clear_boards_set_BX: 
    1029 0CE9  3C 02					cmp		
						al, 2 
    1030 0CEB  0F 85 0CF5 R				jne		
						clear_p2_board 
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-35


    1031 0CEF  BB 00CA R				mov		
						bx, offset cs:p1_board 
    1032 0CF2  EB 04 90					jmp		
						begin_clearing_board 
    1033 0CF5				clear_p2_board: 
    1034 0CF5  BB 02A3 R				mov		
						bx, offset cs:p2_board 
    1035 0CF8				begin_clearing_board: 
    1036 0CF8  B9 00D2					mov		
						cx, 210 
    1037 0CFB				clear_boards_loop: 
    1038 0CFB  2E: C7 07 0000				mov		
						word ptr cs:[bx], 0 
    1039 0D00  83 C3 02					add		
						bx, 2 
    1040 0D03  E2 F6					loop		clear_b
					oards_loop 
    1041 0D05  2C 01					sub		
						al, 1 
    1042 0D07  75 E0					jnz		
						clear_boards_set_BX 
    1043				 
    1044 0D09  68 0001					push		word pt
					r 1 
    1045 0D0C  E8 111A R				call		draw_bo
					ard 
    1046 0D0F  83 C4 02					add		
						sp, 2 
    1047 0D12  68 0002					push		word pt
					r 2 
    1048 0D15  E8 111A R				call		draw_bo
					ard 
    1049 0D18  83 C4 02					add		
						sp, 2 
    1050 0D1B  59					pop		
						cx 
    1051 0D1C  5B					pop		
						bx 
    1052 0D1D  58					pop		
						ax 
    1053 0D1E  C3					ret 
    1054 0D1F				clear_boards endp 
    1055				 
    1056 0D1F				clear_lines proc 
    1057 0D1F  55					push		bp 
    1058 0D20  8B EC					mov		
						bp, sp 
    1059					;ss:[bp+4] = 1/2 -> p1/p2_board
					 
    1060 0D22  50					push		ax 
    1061 0D23  53					push		bx 
    1062 0D24  56					push		si 
    1063 0D25  57					push		di 
    1064						 
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-36


    1065 0D26  B0 00					mov		
						al, 0			
						; if al = 1 then line was clear
					ed 
    1066 0D28  80 7E 04 01				cmp		
						byte ptr ss:[bp+4], 1 
    1067 0D2C  0F 85 0D36 R				jne		
						clear_p2_lines 
    1068 0D30  BB 00CA R				mov		
						bx, offset cs:p1_board 
    1069 0D33  EB 04 90					jmp		
						start_clearing_lines 
    1070 0D36				clear_p2_lines: 
    1071 0D36  BB 02A3 R				mov		
						bx, offset cs:p2_board 
    1072 0D39				start_clearing_lines: 
    1073 0D39  BF 0014					mov		
						di, 20			; dont 
					check top line (which is 21th, only to 
					be equal to zero). thats why offset fro
					m start = 20 = width*sizeof(bo
    1074 0D3C				look_for_lines_to_clear: 
    1075 0D3C  B9 000A					mov		
						cx, 10 
    1076 0D3F				check_if_should_clear_line:	; here 
					di%20 = 0. it's the beginning of line 
    1077 0D3F  2E: 83 39 00				cmp		
						word ptr cs:[bx+di], 0 
    1078 0D43  0F 84 0D4C R				je		
						checked_if_should_clear 
    1079 0D47  83 C7 02					add		
						di, 2 
    1080 0D4A  E2 F3					loop		check_i
					f_should_clear_line 
    1081 0D4C				checked_if_should_clear: 
    1082 0D4C  83 F9 00					cmp		
						cx, 0 
    1083 0D4F  0F 84 0D5A R				je		
						clear_the_line 
    1084 0D53  D1 E1					shl		
						cx, 1 
    1085 0D55  03 F9					add		
						di, cx 
    1086 0D57  EB 17 90					jmp		
						look_for_lines_loop_end 
    1087 0D5A				clear_the_line: 
    1088 0D5A  8B F7					mov		
						si, di 
    1089 0D5C  83 EE 02					sub		
						si, 2 
    1090 0D5F				clear_the_line_loop: 
    1091 0D5F  2E: 8B 40 EC				mov		
						ax, cs:[bx+si-20] 
    1092 0D63  2E: 89 00				mov		
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-37


						cs:[bx+si], ax 
    1093 0D66  83 EE 02					sub		
						si, 2 
    1094 0D69  83 FE 12					cmp		
						si, 18 
    1095 0D6C  77 F1					ja		
						clear_the_line_loop 
    1096 0D6E  B0 01					mov		
						al, 1 
    1097 0D70				look_for_lines_loop_end: 
    1098 0D70  81 FF 01A4				cmp		
						di, 420 
    1099 0D74  72 C6					jb		
						look_for_lines_to_clear 
    1100				 
    1101 0D76  3C 01					cmp		
						al, 1 
    1102 0D78  0F 85 0D89 R				jne		
						no_lines_cleared 
    1103 0D7C  2E: 8A 87 01B6				mov		
						al, cs:[bx+438]		; if cl
					eared line, then speed_step = 4*speed 
    1104 0D81  C0 E0 02					shl		
						al, 2			
						; because if you score point yo
					u also get time to think  
    1105 0D84  2E: 88 87 01B7				mov		
						cs:[bx+439], al 
    1106 0D89				no_lines_cleared: 
    1107				 
    1108 0D89  5F					pop		
						di 
    1109 0D8A  5E					pop		
						si 
    1110 0D8B  5B					pop		
						bx 
    1111 0D8C  58					pop		
						ax 
    1112 0D8D  5D					pop		
						bp 
    1113 0D8E  C3					ret 
    1114 0D8F				clear_lines endp 
    1115				 
    1116 0D8F				map_coordinates_to_pixel_positions proc
					 
    1117 0D8F  55					push		bp 
    1118 0D90  8B EC					mov		
						bp, sp 
    1119					;ss:[bp+4] = 1/2 -> coordinates
					 of player1/2 
    1120 0D92  50					push		ax 
    1121 0D93  53					push		bx 
    1122 0D94  51					push		cx 
    1123 0D95  52					push		dx 
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-38


    1124 0D96  57					push		di 
    1125 0D97  56					push		si 
    1126						 
    1127 0D98  80 7E 04 01				cmp		
						byte ptr ss:[bp+4], 1 
    1128 0D9C  0F 85 0DAE R				jne		
						coordinates_of_p2 
    1129 0DA0  BB 0270 R				mov		
						bx, offset cs:p1_tiles_X 
    1130 0DA3  BF 0278 R				mov		
						di, offset cs:p1_pixel_position
					s 
    1131 0DA6  2E: 8B 36 00B2 R				mov		
						si, cs:p1_top_left 
    1132 0DAB  EB 0C 90					jmp		
						begin_mapping 
    1133 0DAE				coordinates_of_p2: 
    1134 0DAE  BB 0449 R				mov		
						bx, offset cs:p2_tiles_X 
    1135 0DB1  BF 0451 R				mov		
						di, offset cs:p2_pixel_position
					s 
    1136 0DB4  2E: 8B 36 028B R				mov		
						si, cs:p2_top_left 
    1137 0DB9				begin_mapping: 
    1138 0DB9  B9 0004					mov		
						cx, 4 
    1139 0DBC				mapping_coordinates_loop: 
    1140 0DBC  B8 0140					mov		
						ax,	320		
									; ax = 
					320 
    1141 0DBF  2E: 0F B6 57 04				movzx		dx, byt
					e ptr cs:[bx+4] 
    1142 0DC4  F7 E2					mul		
						dx			
									; ax = 
					tiles_Y*320 
    1143 0DC6  2E: 0F B6 17				movzx		dx, byt
					e ptr cs:[bx] 
    1144 0DCA  03 C2					add		
						ax, dx			
								; ax = tiles_Y*
					320 + tiles_X 
    1145 0DCC  2E: 8B 16 0016 R				mov		
						dx, cs:tile_size 
    1146 0DD1  F7 E2					mul		
						dx			
									; ax = 
					tiles_Y*tile_size*320 + tiles_X*tile_si
					ze 
    1147 0DD3  03 C6					add		
						ax, si 
    1148 0DD5  2E: 89 05				mov		
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-39


						cs:[di], ax 
    1149 0DD8  43					inc		
						bx 
    1150 0DD9  83 C7 02					add		
						di, 2 
    1151 0DDC  E2 DE					loop		mapping
					_coordinates_loop 
    1152				 
    1153 0DDE  5E					pop		
						si 
    1154 0DDF  5F					pop		
						di 
    1155 0DE0  5A					pop		
						dx 
    1156 0DE1  59					pop		
						cx 
    1157 0DE2  5B					pop		
						bx 
    1158 0DE3  58					pop		
						ax 
    1159 0DE4  5D					pop		
						bp 
    1160 0DE5  C3					ret 
    1161 0DE6				map_coordinates_to_pixel_positions endp
					 
    1162 0DE6				draw_shape proc 
    1163 0DE6  55					push		bp 
    1164 0DE7  8B EC					mov		
						bp, sp 
    1165					;ss:[bp+4] = 1/2 -> shape of pl
					ayer1/2 
    1166 0DE9  50					push		ax 
    1167 0DEA  53					push		bx 
    1168 0DEB  51					push		cx 
    1169 0DEC  56					push		si 
    1170						 
    1171 0DED  FF 76 04					push		word pt
					r ss:[bp+4] 
    1172 0DF0  E8 0D8F R				call		map_coo
					rdinates_to_pixel_positions 
    1173 0DF3  83 C4 02					add		
						sp, 2 
    1174				 
    1175 0DF6  80 7E 04 01				cmp		
						byte ptr ss:[bp+4], 1 
    1176 0DFA  0F 85 0E0B R				jne		
						draw_shape_p2 
    1177 0DFE  BB 0278 R				mov		
						bx, offset cs:p1_pixel_position
					s 
    1178 0E01  BE 0274 R				mov		
						si, offset cs:p1_tiles_Y 
    1179 0E04  2E: A1 00C5 R				mov		
						ax, cs:p1_color 
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-40


    1180 0E08  EB 0B 90					jmp		
						begin_drawing_shape 
    1181 0E0B				draw_shape_p2: 
    1182 0E0B  BB 0451 R				mov		
						bx, offset cs:p2_pixel_position
					s 
    1183 0E0E  BE 044D R				mov		
						si, offset cs:p2_tiles_Y 
    1184 0E11  2E: A1 029E R				mov		
						ax, cs:p2_color 
    1185 0E15				begin_drawing_shape: 
    1186						 
    1187 0E15  B9 0004					mov		
						cx, 4 
    1188 0E18  2E: FF 0E 0016 R				dec		
						word ptr cs:tile_size	; did i
					t to have 1 pixel gap between everythin
					g 
    1189 0E1D				drawing_shape_loop: 
    1190 0E1D  2E: 80 3C 00				cmp		
						byte ptr cs:[si], 0 
    1191 0E21  0F 84 0E2F R				je		
						dont_draw_this_tile 
    1192 0E25  2E: FF 37				push		word pt
					r cs:[bx] 
    1193 0E28  50					push		ax 
    1194 0E29  E8 122D R				call		draw_sq
					uare 
    1195 0E2C  83 C4 04					add		
						sp, 4 
    1196 0E2F				dont_draw_this_tile: 
    1197 0E2F  46					inc		
						si 
    1198 0E30  83 C3 02					add		
						bx, 2 
    1199 0E33  E2 E8					loop		drawing
					_shape_loop 
    1200 0E35  2E: FF 06 0016 R				inc		
						word ptr cs:tile_size 
    1201				 
    1202 0E3A  5E					pop		
						si 
    1203 0E3B  59					pop		
						cx 
    1204 0E3C  5B					pop		
						bx 
    1205 0E3D  58					pop		
						ax 
    1206 0E3E  5D					pop		
						bp 
    1207 0E3F  C3					ret 
    1208 0E40				draw_shape endp 
    1209 0E40				draw_next_shape proc 
    1210 0E40  55					push		bp 
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-41


    1211 0E41  8B EC					mov		
						bp, sp 
    1212 0E43  83 EC 02					sub		
						sp, 2 
    1213					;ss:[bp-2] = next shape color 
    1214					;ss:[bp+4] = 1/2 -> shape of pl
					ayer1/2 
    1215 0E46  50					push		ax 
    1216 0E47  53					push		bx 
    1217 0E48  51					push		cx 
    1218 0E49  52					push		dx 
    1219 0E4A  56					push		si 
    1220 0E4B  57					push		di 
    1221				 
    1222 0E4C  80 7E 04 01				cmp		
						byte ptr ss:[bp+4], 1 
    1223 0E50  0F 85 0E60 R				jne		
						next_shape_of_p2 
    1224 0E54  2E: A0 0287 R				mov		
						al, cs:p1_next_shape 
    1225 0E58  2E: 8B 1E 00B0 R				mov		
						bx, cs:p1_top_left_next 
    1226 0E5D  EB 0A 90					jmp		
						start_drawing_next_shape 
    1227 0E60				next_shape_of_p2: 
    1228 0E60  2E: A0 0460 R				mov		
						al, cs:p2_next_shape 
    1229 0E64  2E: 8B 1E 0289 R				mov		
						bx, cs:p2_top_left_next 
    1230 0E69				start_drawing_next_shape: 
    1231				 
    1232 0E69  3C 00					cmp		
						al, 0 
    1233 0E6B  0F 84 0EF3 R				je		
						next_shape_I 
    1234 0E6F  3C 01					cmp		
						al, 1 
    1235 0E71  0F 84 0EE2 R				je		
						next_shape_O 
    1236 0E75  3C 02					cmp		
						al, 2 
    1237 0E77  0F 84 0ED1 R				je		
						next_shape_T 
    1238 0E7B  3C 03					cmp		
						al, 3 
    1239 0E7D  0F 84 0EC0 R				je		
						next_shape_L 
    1240 0E81  3C 04					cmp		
						al, 4 
    1241 0E83  0F 84 0EAF R				je		
						next_shape_Z 
    1242 0E87  3C 05					cmp		
						al, 5 
    1243 0E89  0F 84 0E9E R				je		
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-42


						next_shape_J 
    1244				;next_shape_S:	 
    1245 0E8D  2E: 8B 16 0012 R				mov		
						dx, cs:[colors+4] 
    1246 0E92  89 56 FE					mov		
						ss:[bp-2], dx 
    1247 0E95  BE 0090 R				mov		
						si, offset cs:shape_S_X 
    1248 0E98  BF 0098 R				mov		
						di, offset cs:shape_S_Y 
    1249 0E9B  EB 67 90					jmp		
						next_shape_map_coordinates 
    1250 0E9E				next_shape_J: 
    1251 0E9E  2E: 8B 16 0012 R				mov		
						dx, cs:[colors+4] 
    1252 0EA3  89 56 FE					mov		
						ss:[bp-2], dx 
    1253 0EA6  BE 0070 R				mov		
						si, offset cs:shape_J_X 
    1254 0EA9  BF 0080 R				mov		
						di, offset cs:shape_J_Y 
    1255 0EAC  EB 56 90					jmp		
						next_shape_map_coordinates 
    1256 0EAF				next_shape_Z: 
    1257 0EAF  2E: 8B 16 0010 R				mov		
						dx, cs:[colors+2] 
    1258 0EB4  89 56 FE					mov		
						ss:[bp-2], dx 
    1259 0EB7  BE 00A0 R				mov		
						si, offset cs:shape_Z_X 
    1260 0EBA  BF 00A8 R				mov		
						di, offset cs:shape_Z_Y 
    1261 0EBD  EB 45 90					jmp		
						next_shape_map_coordinates 
    1262 0EC0				next_shape_L: 
    1263 0EC0  2E: 8B 16 0010 R				mov		
						dx, cs:[colors+2] 
    1264 0EC5  89 56 FE					mov		
						ss:[bp-2], dx 
    1265 0EC8  BE 0050 R				mov		
						si, offset cs:shape_L_X 
    1266 0ECB  BF 0060 R				mov		
						di, offset cs:shape_L_Y 
    1267 0ECE  EB 34 90					jmp		
						next_shape_map_coordinates 
    1268 0ED1				next_shape_T: 
    1269 0ED1  2E: 8B 16 000E R				mov		
						dx, cs:[colors] 
    1270 0ED6  89 56 FE					mov		
						ss:[bp-2], dx 
    1271 0ED9  BE 0030 R				mov		
						si, offset cs:shape_T_X 
    1272 0EDC  BF 0040 R				mov		
						di, offset cs:shape_T_Y 
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-43


    1273 0EDF  EB 23 90					jmp		
						next_shape_map_coordinates 
    1274 0EE2				next_shape_O: 
    1275 0EE2  2E: 8B 16 000E R				mov		
						dx, cs:[colors] 
    1276 0EE7  89 56 FE					mov		
						ss:[bp-2], dx 
    1277 0EEA  BE 0018 R				mov		
						si, offset cs:shape_O_X 
    1278 0EED  BF 001C R				mov		
						di, offset cs:shape_O_Y 
    1279 0EF0  EB 12 90					jmp		
						next_shape_map_coordinates 
    1280 0EF3				next_shape_I: 
    1281 0EF3  2E: 8B 16 000E R				mov		
						dx, cs:[colors] 
    1282 0EF8  89 56 FE					mov		
						ss:[bp-2], dx 
    1283 0EFB  BE 0020 R				mov		
						si, offset cs:shape_I_X 
    1284 0EFE  BF 0028 R				mov		
						di, offset cs:shape_I_Y 
    1285 0F01  EB 01 90					jmp		
						next_shape_map_coordinates 
    1286 0F04				next_shape_map_coordinates: 
    1287				 
    1288 0F04  4B					dec		
						bx 
    1289 0F05  2E: C1 26 0016 R 02			shl		
						cs:tile_size, 2 
    1290 0F0B  2E: FF 06 0016 R				inc		
						cs:tile_size 
    1291 0F10  53					push		bx 
    1292 0F11  68 0808					push		0808h 
    1293 0F14  E8 122D R				call		draw_sq
					uare 
    1294 0F17  83 C4 04					add		
						sp, 4 
    1295 0F1A  2E: FF 0E 0016 R				dec		
						cs:tile_size 
    1296 0F1F  2E: C1 2E 0016 R 02			shr		
						cs:tile_size, 2 
    1297 0F25  43					inc		
						bx 
    1298				 
    1299 0F26  B9 0004					mov		
						cx, 4 
    1300 0F29				drawing_next_shape_loop: 
    1301 0F29  B8 0140					mov		
						ax, 320 
    1302 0F2C  2E: 0F B6 15				movzx		dx, byt
					e ptr cs:[di] 
    1303 0F30  F7 E2					mul		
						dx 
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-44


    1304 0F32  2E: 0F B6 14				movzx		dx, byt
					e ptr cs:[si] 
    1305 0F36  03 C2					add		
						ax, dx 
    1306 0F38  2E: 8B 16 0016 R				mov		
						dx, cs:tile_size 
    1307 0F3D  F7 E2					mul		
						dx 
    1308 0F3F  03 C3					add		
						ax, bx 
    1309				 
    1310 0F41  2E: FF 0E 0016 R				dec		
						word ptr cs:tile_size 
    1311 0F46  50					push		ax 
    1312 0F47  FF 76 FE					push		word pt
					r ss:[bp-2] 
    1313 0F4A  E8 122D R				call		draw_sq
					uare 
    1314 0F4D  83 C4 04					add		
						sp, 4 
    1315 0F50  2E: FF 06 0016 R				inc		
						word ptr cs:tile_size 
    1316 0F55  46					inc		
						si 
    1317 0F56  47					inc		
						di 
    1318 0F57  E2 D0					loop		drawing
					_next_shape_loop 
    1319				 
    1320 0F59  5F					pop		
						di 
    1321 0F5A  5E					pop		
						si 
    1322 0F5B  5A					pop		
						dx 
    1323 0F5C  59					pop		
						cx 
    1324 0F5D  5B					pop		
						bx 
    1325 0F5E  58					pop		
						ax 
    1326 0F5F  83 C4 02					add		
						sp, 2 
    1327 0F62  5D					pop		
						bp 
    1328 0F63  C3					ret 
    1329 0F64				draw_next_shape endp 
    1330 0F64				erase_shape proc 
    1331 0F64  55					push		bp 
    1332 0F65  8B EC					mov		
						bp, sp 
    1333					;ss:[bp+4] = 1/2 -> shape of pl
					ayer1/2 
    1334 0F67  53					push		bx 
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-45


    1335 0F68  51					push		cx 
    1336 0F69  56					push		si 
    1337				 
    1338 0F6A  80 7E 04 01				cmp		
						byte ptr ss:[bp+4], 1 
    1339 0F6E  0F 85 0F7B R				jne		
						erase_shape_p2 
    1340 0F72  BB 0278 R				mov		
						bx, offset cs:p1_pixel_position
					s 
    1341 0F75  BE 0274 R				mov		
						si, offset cs:p1_tiles_Y 
    1342 0F78  EB 07 90					jmp		
						begin_erasing_shape 
    1343 0F7B				erase_shape_p2: 
    1344 0F7B  BB 0451 R				mov		
						bx, offset cs:p2_pixel_position
					s 
    1345 0F7E  BE 044D R				mov		
						si, offset cs:p2_tiles_Y 
    1346 0F81				begin_erasing_shape: 
    1347						 
    1348 0F81  B9 0004					mov		
						cx, 4 
    1349 0F84  2E: FF 0E 0016 R				dec		
						word ptr cs:tile_size 
    1350 0F89				erasing_shape_loop: 
    1351 0F89  2E: 80 3C 00				cmp		
						byte ptr cs:[si], 0 
    1352 0F8D  0F 84 0F9D R				je		
						dont_erase_this_tile 
    1353 0F91  2E: FF 37				push		word pt
					r cs:[bx] 
    1354 0F94  68 0000					push		word pt
					r 0 
    1355 0F97  E8 122D R				call		draw_sq
					uare 
    1356 0F9A  83 C4 04					add		
						sp, 4 
    1357 0F9D				dont_erase_this_tile: 
    1358 0F9D  46					inc		
						si 
    1359 0F9E  83 C3 02					add		
						bx, 2 
    1360 0FA1  E2 E6					loop		erasing
					_shape_loop 
    1361 0FA3  2E: FF 06 0016 R				inc		
						word ptr cs:tile_size 
    1362				 
    1363 0FA8  5E					pop		
						si 
    1364 0FA9  59					pop		
						cx 
    1365 0FAA  5B					pop		
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-46


						bx 
    1366 0FAB  5D					pop		
						bp 
    1367 0FAC  C3					ret 
    1368 0FAD				erase_shape endp 
    1369 0FAD				make_new_shape proc 
    1370 0FAD  55					push		bp 
    1371 0FAE  8B EC					mov		
						bp, sp 
    1372					;ss:[bp+4] = 1 or 2 -> shape fo
					r player1 or player2 
    1373 0FB0  66| 50					push		eax 
    1374 0FB2  53					push		bx 
    1375 0FB3  51					push		cx 
    1376				 
    1377 0FB4  80 7E 04 01				cmp		
						byte ptr ss:[bp+4], 1 
    1378 0FB8  0F 85 0FC2 R				jne		
						shape_for_p2 
    1379 0FBC  BB 026E R				mov		
						bx, offset cs:p1_shape_X 
    1380 0FBF  EB 04 90					jmp		
						creating_shape 
    1381 0FC2				shape_for_p2: 
    1382 0FC2  BB 0447 R				mov		
						bx, offset cs:p2_shape_X 
    1383 0FC5				creating_shape: 
    1384 0FC5  2E: C6 87 FE5B 00			mov		
						byte ptr cs:[bx-421], 0	
						; rotation = 0 
    1385 0FCB  2E: C6 07 03				mov		
						byte ptr cs:[bx], 3	
						; x coordinate 
    1386 0FCF  2E: C6 47 01 00				mov		
						byte ptr cs:[bx+1], 0	; y coo
					rdinate 
    1387 0FD4  2E: 8A 67 19				mov		
						ah, cs:[bx+25] 
    1388 0FD8  2E: 88 A7 FE5A				mov		
						cs:[bx-422], ah		
							; p1/p2_shape = next_sh
					ape 
    1389 0FDD  80 FC 00					cmp		
						ah, 0 
    1390 0FE0  0F 84 10C7 R				je		
						make_line_shape 
    1391 0FE4  80 FC 01					cmp		
						ah, 1 
    1392 0FE7  0F 84 10A7 R				je		
						make_O_shape 
    1393 0FEB  80 FC 02					cmp		
						ah, 2 
    1394 0FEE  0F 84 1087 R				je		
						make_T_shape 
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-47


    1395 0FF2  80 FC 03					cmp		
						ah, 3 
    1396 0FF5  0F 84 1067 R				je		
						make_L_shape 
    1397 0FF9  80 FC 04					cmp		
						ah, 4 
    1398 0FFC  0F 84 1047 R				je		
						make_Z_shape 
    1399 1000  80 FC 05					cmp		
						ah, 5 
    1400 1003  0F 84 1027 R				je		
						make_J_shape 
    1401						;cmp		
						ah, 6 
    1402						;je		
						make_S_shape 
    1403				;make_S_shape: 
    1404 1007  2E: A1 0012 R				mov		
						ax, cs:[colors+4] 
    1405 100B  2E: 89 87 FE57				mov		
						cs:[bx-425], ax 
    1406 1010  2E: 66| A1 0090 R			mov		
						eax, cs:shape_S_X 
    1407 1015  2E: 66| 89 47 02				mov		
						cs:[bx+2], eax 
    1408 101A  2E: 66| A1 0098 R			mov		
						eax, cs:shape_S_Y 
    1409 101F  2E: 66| 89 47 06				mov		
						cs:[bx+6], eax 
    1410 1024  E9 10E7 R				jmp		
						correct_tile_coordinates 
    1411 1027				make_J_shape: 
    1412 1027  2E: A1 0012 R				mov		
						ax, cs:[colors+4] 
    1413 102B  2E: 89 87 FE57				mov		
						cs:[bx-425], ax 
    1414 1030  2E: 66| A1 0070 R			mov		
						eax, cs:shape_J_X 
    1415 1035  2E: 66| 89 47 02				mov		
						cs:[bx+2], eax 
    1416 103A  2E: 66| A1 0080 R			mov		
						eax, cs:shape_J_Y 
    1417 103F  2E: 66| 89 47 06				mov		
						cs:[bx+6], eax 
    1418 1044  E9 10E7 R				jmp		
						correct_tile_coordinates 
    1419 1047				make_Z_shape: 
    1420 1047  2E: A1 0010 R				mov		
						ax, cs:[colors+2] 
    1421 104B  2E: 89 87 FE57				mov		
						cs:[bx-425], ax 
    1422 1050  2E: 66| A1 00A0 R			mov		
						eax, cs:shape_Z_X 
    1423 1055  2E: 66| 89 47 02				mov		
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-48


						cs:[bx+2], eax 
    1424 105A  2E: 66| A1 00A8 R			mov		
						eax, cs:shape_Z_Y 
    1425 105F  2E: 66| 89 47 06				mov		
						cs:[bx+6], eax 
    1426 1064  E9 10E7 R				jmp		
						correct_tile_coordinates 
    1427 1067				make_L_shape: 
    1428 1067  2E: A1 0010 R				mov		
						ax, cs:[colors+2] 
    1429 106B  2E: 89 87 FE57				mov		
						cs:[bx-425], ax 
    1430 1070  2E: 66| A1 0050 R			mov		
						eax, cs:shape_L_X 
    1431 1075  2E: 66| 89 47 02				mov		
						cs:[bx+2], eax 
    1432 107A  2E: 66| A1 0060 R			mov		
						eax, cs:shape_L_Y 
    1433 107F  2E: 66| 89 47 06				mov		
						cs:[bx+6], eax 
    1434 1084  EB 61 90					jmp		
						correct_tile_coordinates 
    1435 1087				make_T_shape: 
    1436 1087  2E: A1 000E R				mov		
						ax, cs:colors 
    1437 108B  2E: 89 87 FE57				mov		
						cs:[bx-425], ax 
    1438 1090  2E: 66| A1 0030 R			mov		
						eax, cs:shape_T_X 
    1439 1095  2E: 66| 89 47 02				mov		
						cs:[bx+2], eax 
    1440 109A  2E: 66| A1 0040 R			mov		
						eax, cs:shape_T_Y 
    1441 109F  2E: 66| 89 47 06				mov		
						cs:[bx+6], eax 
    1442 10A4  EB 41 90					jmp		
						correct_tile_coordinates 
    1443 10A7				make_O_shape: 
    1444 10A7  2E: A1 000E R				mov		
						ax, cs:colors 
    1445 10AB  2E: 89 87 FE57				mov		
						cs:[bx-425], ax 
    1446 10B0  2E: 66| A1 0018 R			mov		
						eax, cs:shape_O_X 
    1447 10B5  2E: 66| 89 47 02				mov		
						cs:[bx+2], eax 
    1448 10BA  2E: 66| A1 001C R			mov		
						eax, cs:shape_O_Y 
    1449 10BF  2E: 66| 89 47 06				mov		
						cs:[bx+6], eax 
    1450 10C4  EB 21 90					jmp		
						correct_tile_coordinates 
    1451 10C7				make_line_shape: 
    1452 10C7  2E: A1 000E R				mov		
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-49


						ax, cs:colors 
    1453 10CB  2E: 89 87 FE57				mov		
						cs:[bx-425], ax 
    1454 10D0  2E: 66| A1 0020 R			mov		
						eax, cs:shape_I_X 
    1455 10D5  2E: 66| 89 47 02				mov		
						cs:[bx+2], eax 
    1456 10DA  2E: 66| A1 0028 R			mov		
						eax, cs:shape_I_Y 
    1457 10DF  2E: 66| 89 47 06				mov		
						cs:[bx+6], eax 
    1458 10E4  EB 01 90					jmp		
						correct_tile_coordinates 
    1459				 
    1460 10E7				correct_tile_coordinates: 
    1461 10E7  B9 0004					mov		
						cx, 4 
    1462 10EA				correct_tile_coordinates_loop: 
    1463 10EA  2E: 80 47 02 03				add		
						byte ptr cs:[bx+2], 3 
    1464 10EF  43					inc		
						bx 
    1465 10F0  E2 F8					loop		correct
					_tile_coordinates_loop 
    1466						 
    1467 10F2  FF 76 04					push		word pt
					r ss:[bp+4] 
    1468 10F5  E8 04A7 R				call		update_
					random_number 
    1469 10F8  83 C4 02					add		
						sp, 2 
    1470				 
    1471 10FB  83 EB 04					sub		
						bx, 4 
    1472 10FE  2E: 0F B6 47 15				movzx		ax, byt
					e ptr cs:[bx+21] 
    1473 1103  B1 07					mov		
						cl, 7 
    1474 1105  F6 F1					div		
						cl 
    1475 1107  2E: 88 67 19				mov		
						cs:[bx+25], ah 
    1476				 
    1477 110B  FF 76 04					push		word pt
					r ss:[bp+4] 
    1478 110E  E8 0E40 R				call		draw_ne
					xt_shape 
    1479 1111  83 C4 02					add		
						sp, 2 
    1480				 
    1481 1114  59					pop		
						cx 
    1482 1115  5B					pop		
						bx 
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-50


    1483 1116  66| 58					pop		
						eax 
    1484 1118  5D					pop		
						bp 
    1485 1119  C3					ret 
    1486 111A				make_new_shape endp 
    1487				 
    1488 111A				draw_board proc 
    1489 111A  55					push		bp 
    1490 111B  8B EC					mov		
						bp, sp 
    1491 111D  50					push		ax 
    1492 111E  53					push		bx 
    1493 111F  51					push		cx 
    1494 1120  52					push		dx 
    1495 1121  57					push		di 
    1496				 
    1497 1122  80 7E 04 01				cmp		
						byte ptr ss:[bp+4], 1 
    1498 1126  0F 85 1130 R				jne		
						draw_p2_board 
    1499 112A  BB 00CA R				mov		
						bx, offset cs:p1_board 
    1500 112D  EB 04 90					jmp		
						start_drawing_board 
    1501 1130				draw_p2_board: 
    1502 1130  BB 02A3 R				mov		
						bx, offset cs:p2_board 
    1503 1133				start_drawing_board: 
    1504 1133  BA 0000					mov		
						dx, 0 
    1505 1136  2E: 8B 7F E8				mov		
						di, cs:[bx-24]		; p1/p2
					_top_left 
    1506 113A  B8 0140					mov		
						ax, 320 
    1507 113D  2E: 8B 0E 0016 R				mov		
						cx, cs:tile_size 
    1508 1142  F7 E1					mul		
						cx 
    1509 1144  03 F8					add		
						di, ax 
    1510 1146  B8 0136					mov		
						ax, 310 
    1511 1149  2E: 8B 0E 0016 R				mov		
						cx, cs:tile_size 
    1512 114E  F7 E1					mul		
						cx			
							; ax = tile_size*screen
					_width - 10*tile_size = new line 
    1513						 
    1514 1150  83 C3 14					add		
						bx, 20 
    1515 1153  2E: 8B 16 0016 R				mov		
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-51


						dx, cs:tile_size 
    1516 1158  2E: FF 0E 0016 R				dec		
						word ptr cs:tile_size 
    1517 115D  B5 14					mov		
						ch, 20 
    1518 115F				drawing_board_Y: 
    1519 115F  B1 0A					mov		
						cl, 10 
    1520 1161				drawing_board_X: 
    1521 1161  57					push		di 
    1522 1162  2E: FF 37				push		word pt
					r cs:[bx] 
    1523 1165  E8 122D R				call		draw_sq
					uare 
    1524 1168  83 C4 04					add		
						sp, 4 
    1525 116B  83 C3 02					add		
						bx, 2 
    1526 116E  03 FA					add		
						di, dx 
    1527 1170  80 E9 01					sub		
						cl, 1 
    1528 1173  75 EC					jnz		
						drawing_board_X 
    1529 1175  03 F8					add		
						di, ax 
    1530 1177  80 ED 01					sub		
						ch, 1 
    1531 117A  75 E3					jnz		
						drawing_board_Y 
    1532 117C  2E: FF 06 0016 R				inc		
						word ptr cs:tile_size 
    1533				 
    1534 1181  5F					pop		
						di 
    1535 1182  5A					pop		
						dx 
    1536 1183  59					pop		
						cx 
    1537 1184  5B					pop		
						bx 
    1538 1185  58					pop		
						ax 
    1539 1186  5D					pop		
						bp 
    1540 1187  C3					ret 
    1541 1188				draw_board endp 
    1542 1188				draw_border proc 
    1543 1188  55					push		bp 
    1544 1189  8B EC					mov		
						bp, sp 
    1545					;ss:[bp+4] = top left pixel of 
					position x=0, y=0 
    1546 118B  50					push		ax 
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-52


    1547 118C  53					push		bx 
    1548 118D  51					push		cx 
    1549 118E  52					push		dx 
    1550					; board = border of multiple gr
					ay squares 
    1551 118F  8B 5E 04					mov		
						bx, ss:[bp+4]		; bx = 
					position current square 
    1552 1192  2E: 2B 1E 0016 R				sub		
						bx, cs:tile_size 
    1553 1197  81 EB 0141				sub		
						bx, 321			
							; 1 pixel left and 1 pi
					xel up. creates 1 pixel gap between boa
					rd left/top wall and position x=0/y=0 
    1554				 
    1555 119B  B9 000C					mov		
						cx, 12 
    1556 119E  2E: 8B 16 0016 R				mov		
						dx, cs:tile_size 
    1557 11A3				drawing_top_border: 
    1558 11A3  53					push		bx 
    1559 11A4  2E: FF 36 0014 R				push		word pt
					r cs:[colors+6] 
    1560 11A9  E8 122D R				call		draw_sq
					uare 
    1561 11AC  83 C4 04					add		
						sp, 4 
    1562 11AF  03 DA					add		
						bx, dx 
    1563 11B1  E2 F0					loop		drawing
					_top_border 
    1564 11B3  43					inc		
						bx 
    1565 11B4  2B DA					sub		
						bx, dx 
    1566 11B6  53					push		bx 
    1567 11B7  2E: FF 36 0014 R				push		word pt
					r cs:[colors+6] 
    1568 11BC  E8 122D R				call		draw_sq
					uare 
    1569 11BF  83 C4 04					add		
						sp, 4 
    1570				 
    1571 11C2  B9 0015					mov		
						cx, 21 
    1572 11C5  B8 0140					mov		
						ax, 320 
    1573 11C8  F7 E2					mul		
						dx			
						; ax = pixel vertical gap betwe
					en adjacent squares 
    1574 11CA				drawing_right_border: 
    1575 11CA  03 D8					add		
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-53


						bx, ax 
    1576 11CC  53					push		bx 
    1577 11CD  2E: FF 36 0014 R				push		word pt
					r cs:[colors+6] 
    1578 11D2  E8 122D R				call		draw_sq
					uare 
    1579 11D5  83 C4 04					add		
						sp, 4 
    1580 11D8  E2 F0					loop		drawing
					_right_border 
    1581 11DA  81 C3 0140				add		
						bx, 320			; 1 pix
					el down creates 1 pixel gap between lyi
					ng shape and bottom border 
    1582 11DE  53					push		bx 
    1583 11DF  2E: FF 36 0014 R				push		word pt
					r cs:[colors+6] 
    1584 11E4  E8 122D R				call		draw_sq
					uare 
    1585 11E7  83 C4 04					add		
						sp, 4 
    1586				 
    1587 11EA  2E: 8B 16 0016 R				mov		
						dx, tile_size 
    1588 11EF  B9 000B					mov		
						cx, 11 
    1589 11F2				drawing_bottom_border: 
    1590 11F2  2B DA					sub		
						bx, dx 
    1591 11F4  53					push		bx 
    1592 11F5  2E: FF 36 0014 R				push		word pt
					r cs:[colors+6] 
    1593 11FA  E8 122D R				call		draw_sq
					uare 
    1594 11FD  83 C4 04					add		
						sp, 4 
    1595 1200  E2 F0					loop		drawing
					_bottom_border 
    1596 1202  4B					dec		
						bx 
    1597 1203  53					push		bx 
    1598 1204  2E: FF 36 0014 R				push		word pt
					r cs:[colors+6] 
    1599 1209  E8 122D R				call		draw_sq
					uare 
    1600 120C  83 C4 04					add		
						sp, 4 
    1601				 
    1602				 
    1603 120F  B8 0140					mov		
						ax, 320 
    1604 1212  F7 E2					mul		
						dx 
    1605 1214  B9 0015					mov		
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-54


						cx, 21 
    1606 1217				drawing_left_border: 
    1607 1217  2B D8					sub		
						bx, ax 
    1608 1219  53					push		bx 
    1609 121A  2E: FF 36 0014 R				push		word pt
					r cs:[colors+6] 
    1610 121F  E8 122D R				call		draw_sq
					uare 
    1611 1222  83 C4 04					add		
						sp, 4 
    1612 1225  E2 F0					loop		drawing
					_left_border 
    1613				 
    1614 1227  58					pop		
						ax 
    1615 1228  5B					pop		
						bx 
    1616 1229  59					pop		
						cx 
    1617 122A  5A					pop		
						dx 
    1618 122B  5D					pop		
						bp 
    1619 122C  C3					ret 
    1620 122D				draw_border endp 
    1621 122D				draw_square proc 
    1622 122D  55					push		bp 
    1623 122E  8B EC					mov		
						bp, sp 
    1624 1230  50					push		ax 
    1625 1231  53					push		bx 
    1626 1232  51					push		cx 
    1627 1233  52					push		dx 
    1628 1234  06					push		es 
    1629					;word ptr ss:[bp+6] = position 
					of square top left pixel 
    1630					;byte ptr ss:[bp+5] = color of 
					square border 
    1631					;byte ptr ss:[bp+4] = color of 
					square 
    1632 1235  B8 A000					mov		
						ax, 0a000h 
    1633 1238  8E C0					mov		
						es, ax 
    1634 123A  2E: 8B 0E 0016 R				mov		
						cx, cs:tile_size	
						; using it because I'm lazy to 
					use function parameter here... writing 
					tetris in assembly... 
    1635 123F  8B 5E 06					mov		
						bx, ss:[bp+6]		
						; position of current pixel 
    1636 1242  8A 56 05					mov		
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-55


						dl, ss:[bp+5] 
    1637 1245				top_border: 
    1638 1245  26: 88 17				mov		
						es:[bx], dl 
    1639 1248  43					inc		
						bx 
    1640 1249  E2 FA					loop		top_bor
					der 
    1641 124B  B8 0140					mov		
						ax, 320			
							; screen is 320 pixels 
					wide 
    1642 124E  2E: 8B 16 0016 R				mov		
						dx, cs:tile_size	
						; height of square 
    1643 1253  83 EA 02					sub		
						dx, 2			
							; because border is 2 p
					ixels high 
    1644 1256  F7 E2					mul		
						dx			
								; (height-2) * 
					320 = position (offset) of bottom left 
					corner 
    1645 1258				draw_y: 
    1646 1258  8B 5E 06					mov		
						bx, ss:[bp+6] 
    1647 125B  03 D8					add		
						bx, ax 
    1648 125D  8A 56 05					mov		
						dl, ss:[bp+5] 
    1649 1260  26: 88 17				mov		
						es:[bx], dl		
						; draw left border 
    1650 1263  43					inc		
						bx			
							; next pixel 
    1651 1264  2E: 8B 0E 0016 R				mov		
						cx, cs:tile_size 
    1652 1269  83 E9 02					sub		
						cx, 2			
						; middle is smaller by 2 becaus
					e left and right border are 2 pixels 
    1653 126C				draw_x: 
    1654 126C  8A 56 04					mov		
						dl, ss:[bp+4] 
    1655 126F  26: 88 17				mov		
						es:[bx], dl 
    1656 1272  43					inc		
						bx 
    1657 1273  E2 F7					loop		draw_x 
    1658 1275  8A 56 05					mov		
						dl, ss:[bp+5] 
    1659 1278  26: 88 17				mov		
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-56


						es:[bx], dl		
						;draw right border 
    1660 127B  2D 0140					sub		
						ax, 320 
    1661 127E  75 D8					jnz		
						draw_y 
    1662				 
    1663 1280  2E: 8B 0E 0016 R				mov		
						cx, cs:tile_size 
    1664 1285  8B 5E 06					mov		
						bx, ss:[bp+6] 
    1665 1288  B8 0140					mov		
						ax, 320 
    1666 128B  2E: 8B 16 0016 R				mov		
						dx, cs:tile_size 
    1667 1290  4A					dec		
						dx 
    1668 1291  F7 E2					mul		
						dx 
    1669 1293  03 D8					add		
						bx, ax 
    1670 1295  8A 56 05					mov		
						dl, ss:[bp+5]		; ax = 
					height*320 = bottom left corner 
    1671 1298				bottom_border: 
    1672 1298  26: 88 17				mov		
						es:[bx],dl 
    1673 129B  43					inc		
						bx 
    1674 129C  E2 FA					loop		bottom_
					border 
    1675				 
    1676 129E  07					pop		
						es 
    1677 129F  5A					pop		
						dx 
    1678 12A0  59					pop		
						cx 
    1679 12A1  5B					pop		
						bx 
    1680 12A2  58					pop		
						ax 
    1681 12A3  5D					pop		
						bp 
    1682 12A4  C3					ret 
    1683 12A5				draw_square endp 
    1684				 
    1685 12A5				game_init proc 
    1686 12A5  55					push		bp 
    1687 12A6  8B EC					mov		
						bp, sp 
    1688 12A8  50					push		ax 
    1689 12A9  E8 0462 R				call		start_r
					andom_numbers 
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-57


    1690						 
    1691 12AC  2E: C7 06 00B2 R 0F32			mov		
						word ptr cs:p1_top_left, 3890
								; position of t
					op left pixel of player1 board 
    1692 12B3  2E: C7 06 028B R 0FBE			mov		
						word ptr cs:p2_top_left, 4030 
    1693 12BA  2E: C7 06 00B0 R 0DC6			mov		
						word ptr cs:p1_top_left_next, 3
					526		; position of top left 
					pixel of p1 small box with next piece i
					n it 
    1694 12C1  2E: C7 06 0289 R 0EDC			mov		
						word ptr cs:p2_top_left_next, 3
					804 
    1695				 
    1696 12C8  2E: FF 36 00B2 R				push		word pt
					r cs:p1_top_left 
    1697 12CD  E8 1188 R				call		draw_bo
					rder 
    1698 12D0  83 C4 02					add		
						sp, 2 
    1699 12D3  2E: FF 36 028B R				push		word pt
					r cs:p2_top_left 
    1700 12D8  E8 1188 R				call		draw_bo
					rder 
    1701 12DB  83 C4 02					add		
						sp, 2 
    1702						 
    1703 12DE  2E: 0F B6 06 0283 R			movzx		ax, byt
					e ptr cs:p1_rand_number 
    1704 12E4  B1 07					mov		
						cl, 7 
    1705 12E6  F6 F1					div		
						cl 
    1706 12E8  2E: 88 26 0287 R				mov		
						cs:p1_next_shape, ah 
    1707 12ED  68 0001					push		word pt
					r 1 
    1708 12F0  E8 04A7 R				call		update_
					random_number 
    1709 12F3  83 C4 02					add		
						sp, 2 
    1710 12F6  2E: 0F B6 06 045C R			movzx		ax, byt
					e ptr cs:p2_rand_number 
    1711 12FC  B1 07					mov		
						cl, 7 
    1712 12FE  F6 F1					div		
						cl 
    1713 1300  2E: 88 26 0460 R				mov		
						cs:p2_next_shape, ah 
    1714 1305  68 0002					push		word pt
					r 2 
    1715 1308  E8 04A7 R				call		update_
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-58


					random_number 
    1716 130B  83 C4 02					add		
						sp, 2 
    1717				 
    1718 130E  68 0001					push		word pt
					r 1 
    1719 1311  E8 0FAD R				call		make_ne
					w_shape 
    1720 1314  83 C4 02					add		
						sp, 2 
    1721 1317  68 0002					push		word pt
					r 2 
    1722 131A  E8 0FAD R				call		make_ne
					w_shape 
    1723 131D  83 C4 02					add		
						sp, 2 
    1724				 
    1725 1320  68 0001					push		word pt
					r 1 
    1726 1323  E8 0DE6 R				call		draw_sh
					ape 
    1727 1326  83 C4 02					add		
						sp, 2 
    1728 1329  68 0002					push		word pt
					r 2 
    1729 132C  E8 0DE6 R				call		draw_sh
					ape 
    1730 132F  83 C4 02					add		
						sp, 2 
    1731						 
    1732 1332  2E: C6 06 0280 R 06			mov		
						byte ptr cs:p1_speed, 6 
    1733 1338  2E: C6 06 0459 R 06			mov		
						byte ptr cs:p2_speed, 6 
    1734 133E  2E: C6 06 0281 R 14			mov		
						byte ptr cs:p1_speed_step, 20 
    1735 1344  2E: C6 06 045A R 14			mov		
						byte ptr cs:p2_speed_step, 20 
    1736						 
    1737 134A  58					pop 		ax 
    1738 134B  5D					pop		
						bp 
    1739 134C  C3					ret 
    1740 134D				game_init endp 
    1741				 
    1742 134D				START: 
    1743 134D  B4 00					mov		
						ah, 0 
    1744 134F  B0 13					mov		
						al, 13h 
    1745 1351  CD 10					int		
						10h 
    1746 1353  E8 12A5 R				call		game_in
					it 
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-59


    1747 1356  B0 00					mov		
						al, 0 
    1748 1358  B4 05					mov		
						ah, 5 
    1749 135A  CD 0A					int		
						10 
    1750				 
    1751 135C  BB 0000					mov		
						bx, 0 
    1752 135F  8E C3					mov		
						es, bx 
    1753 1361  26: 66| A1 0020				mov		
						eax, es:[32] 
    1754 1366  2E: 66| A3 0001 R			mov		
						cs:vector8, eax 
    1755 136B  B8 ---- R				mov		
						ax, SEG clock_function 
    1756 136E  BB 0664 R				mov		
						bx, OFFSET clock_function 
    1757 1371  FA					cli 
    1758 1372  26: 89 1E 0020				mov		
						es:[32], bx		
							; clock interrupt will 
					call clock_function 
    1759 1377  26: A3 0022				mov		
						es:[34], ax 
    1760 137B  FB					sti 
    1761				 
    1762 137C  26: 66| A1 0024				mov		
						eax, es:[36] 
    1763 1381  2E: 66| A3 0005 R			mov		
						cs:vector9, eax 
    1764 1386  B8 ---- R				mov		
						ax, SEG keyboard_function 
    1765 1389  BB 04D7 R				mov		
						bx, OFFSET keyboard_function 
    1766 138C  FA					cli 
    1767 138D  26: 89 1E 0024				mov		
						es:[36], bx		
							; keyboard interrupt wi
					ll call keyboard_function 
    1768 1392  26: A3 0026				mov		
						es:[38], ax 
    1769 1396  FB					sti 
    1770 1397				waiting: 
    1771 1397  2E: 80 3E 0009 R 00			cmp		
						byte ptr cs:game_over, 0 
    1772 139D  74 F8					je		
						waiting 
    1773				 
    1774 139F  B4 00					mov		
						ah, 0 
    1775 13A1  B0 03					mov		
						al, 3 
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Page     1-60


    1776 13A3  CD 10					int		
						10h 
    1777				 
    1778 13A5  2E: 66| A1 0001 R			mov		
						eax, cs:vector8 
    1779 13AA  FA					cli 
    1780 13AB  26: 66| A3 0020				mov		
						es:[32], eax 
    1781 13B0  FB					sti 
    1782				 
    1783 13B1  2E: 66| A1 0005 R			mov		
						eax, cs:vector9 
    1784 13B6  FA					cli 
    1785 13B7  26: 66| A3 0024				mov		
						es:[36], eax 
    1786 13BC  FB					sti 
    1787				 
    1788 13BD  B8 4C00					mov		
						ax, 4c00h 
    1789 13C0  CD 21					int		
						21h 
    1790 13C2				instructions		ENDS 
    1791				 
    1792 0000				memory				SEGMENT
					 stack 
    1793 0000  0100[					db		
						256 dup (?) 
    1794	    ??			
    1795			 ]	
    1796				
    1797 0100				memory				ENDS 
    1798				 
    1799				END START 
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Symbols-1




                N a m e         	Size	Length	 Align	Combine Class

INSTRUCTIONS . . . . . . . . . .  	16 Bit	13C2	PARA	NONE	
MEMORY . . . . . . . . . . . . .  	32 Bit	0100	PARA	STACK	

Symbols:            

                N a m e         	Type	 Value	 Attr

ADDING_SHAPE_OFFSET_LOOP . . . .  	L NEAR	0A74	INSTRUCTIONS
ADD_SHAPE_OFFSET . . . . . . . .  	L NEAR	0A6A	INSTRUCTIONS

BEGIN_CLEARING_BOARD . . . . . .  	L NEAR	0CF8	INSTRUCTIONS
BEGIN_DRAWING_SHAPE  . . . . . .  	L NEAR	0E15	INSTRUCTIONS
BEGIN_ERASING_SHAPE  . . . . . .  	L NEAR	0F81	INSTRUCTIONS
BEGIN_MAPPING  . . . . . . . . .  	L NEAR	0DB9	INSTRUCTIONS
BOTTOM_BORDER  . . . . . . . . .  	L NEAR	1298	INSTRUCTIONS

CANT_ROTATE  . . . . . . . . . .  	L NEAR	0AE4	INSTRUCTIONS
CHECKED_IF_SHOULD_CLEAR  . . . .  	L NEAR	0D4C	INSTRUCTIONS
CHECKED_P2_DELAY . . . . . . . .  	L NEAR	06EA	INSTRUCTIONS
CHECKED_PRESSING_DOWN  . . . . .  	L NEAR	0806	INSTRUCTIONS
CHECKING_IF_CAN_ROTATE . . . . .  	L NEAR	0A9A	INSTRUCTIONS
CHECK_IF_HIT_BOTTOM  . . . . . .  	L NEAR	0C3E	INSTRUCTIONS
CHECK_IF_HIT_LEFT_TILE . . . . .  	L NEAR	0BAE	INSTRUCTIONS
CHECK_IF_HIT_LEFT_WALL . . . . .  	L NEAR	0B9D	INSTRUCTIONS
CHECK_IF_HIT_RIGHT_TILE  . . . .  	L NEAR	0B23	INSTRUCTIONS
CHECK_IF_HIT_RIGHT_WALL  . . . .  	L NEAR	0B12	INSTRUCTIONS
CHECK_IF_HIT_TILE  . . . . . . .  	L NEAR	0C4F	INSTRUCTIONS
CHECK_IF_J_ROTATION_OVERFLOW . .  	L NEAR	0965	INSTRUCTIONS
CHECK_IF_L_ROTATION_OVERFLOW . .  	L NEAR	09A1	INSTRUCTIONS
CHECK_IF_SHOULD_CLEAR_LINE . . .  	L NEAR	0D3F	INSTRUCTIONS
CHECK_IF_T_ROTATION_OVERFLOW . .  	L NEAR	09DD	INSTRUCTIONS
CHECK_P1_DELAY . . . . . . . . .  	L NEAR	06CC	INSTRUCTIONS
CHECK_P1_RL  . . . . . . . . . .  	L NEAR	0681	INSTRUCTIONS
CHECK_P2_DELAY . . . . . . . . .  	L NEAR	06DB	INSTRUCTIONS
CHECK_P2_DOWN  . . . . . . . . .  	L NEAR	07F6	INSTRUCTIONS
CHECK_P2_RL  . . . . . . . . . .  	L NEAR	06B3	INSTRUCTIONS
CHECK_P2_RR  . . . . . . . . . .  	L NEAR	069A	INSTRUCTIONS
CLEAR_BOARDS . . . . . . . . . .  	N PROC	0CE1	INSTRUCTIONS	Length = 003E
CLEAR_BOARDS_LOOP  . . . . . . .  	L NEAR	0CFB	INSTRUCTIONS
CLEAR_BOARDS_SET_BX  . . . . . .  	L NEAR	0CE9	INSTRUCTIONS
CLEAR_LINES  . . . . . . . . . .  	N PROC	0D1F	INSTRUCTIONS	Length = 0070
CLEAR_P2_BOARD . . . . . . . . .  	L NEAR	0CF5	INSTRUCTIONS
CLEAR_P2_LINES . . . . . . . . .  	L NEAR	0D36	INSTRUCTIONS
CLEAR_THE_LINE . . . . . . . . .  	L NEAR	0D5A	INSTRUCTIONS
CLEAR_THE_LINE_LOOP  . . . . . .  	L NEAR	0D5F	INSTRUCTIONS
CLOCK_FUNCTION . . . . . . . . .  	N PROC	0664	INSTRUCTIONS	Length = 0208
COLORS . . . . . . . . . . . . .  	L WORD	000E	INSTRUCTIONS
COORDINATES_OF_P2  . . . . . . .  	L NEAR	0DAE	INSTRUCTIONS
CORRECT_TILE_COORDINATES . . . .  	L NEAR	10E7	INSTRUCTIONS
CORRECT_TILE_COORDINATES_LOOP  .  	L NEAR	10EA	INSTRUCTIONS
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Symbols-2


CREATING_SHAPE . . . . . . . . .  	L NEAR	0FC5	INSTRUCTIONS

DONT_DRAW_THIS_TILE  . . . . . .  	L NEAR	0E2F	INSTRUCTIONS
DONT_ERASE_THIS_TILE . . . . . .  	L NEAR	0F9D	INSTRUCTIONS
DRAWING_BOARD_X  . . . . . . . .  	L NEAR	1161	INSTRUCTIONS
DRAWING_BOARD_Y  . . . . . . . .  	L NEAR	115F	INSTRUCTIONS
DRAWING_BOTTOM_BORDER  . . . . .  	L NEAR	11F2	INSTRUCTIONS
DRAWING_LEFT_BORDER  . . . . . .  	L NEAR	1217	INSTRUCTIONS
DRAWING_NEXT_SHAPE_LOOP  . . . .  	L NEAR	0F29	INSTRUCTIONS
DRAWING_RIGHT_BORDER . . . . . .  	L NEAR	11CA	INSTRUCTIONS
DRAWING_SHAPE_LOOP . . . . . . .  	L NEAR	0E1D	INSTRUCTIONS
DRAWING_TOP_BORDER . . . . . . .  	L NEAR	11A3	INSTRUCTIONS
DRAW_BOARD . . . . . . . . . . .  	N PROC	111A	INSTRUCTIONS	Length = 006E
DRAW_BORDER  . . . . . . . . . .  	N PROC	1188	INSTRUCTIONS	Length = 00A5
DRAW_MINI_GRID . . . . . . . . .  	N PROC	086C	INSTRUCTIONS	Length = 0054
DRAW_NEXT_SHAPE  . . . . . . . .  	N PROC	0E40	INSTRUCTIONS	Length = 0124
DRAW_P2_BOARD  . . . . . . . . .  	L NEAR	1130	INSTRUCTIONS
DRAW_SHAPE . . . . . . . . . . .  	N PROC	0DE6	INSTRUCTIONS	Length = 005A
DRAW_SHAPE_P2  . . . . . . . . .  	L NEAR	0E0B	INSTRUCTIONS
DRAW_SQUARE  . . . . . . . . . .  	N PROC	122D	INSTRUCTIONS	Length = 0078
DRAW_X . . . . . . . . . . . . .  	L NEAR	126C	INSTRUCTIONS
DRAW_Y . . . . . . . . . . . . .  	L NEAR	1258	INSTRUCTIONS

ENGRAVING_THE_BOAD_ARRAY . . . .  	L NEAR	0C97	INSTRUCTIONS
ERASE_SHAPE  . . . . . . . . . .  	N PROC	0F64	INSTRUCTIONS	Length = 0049
ERASE_SHAPE_P2 . . . . . . . . .  	L NEAR	0F7B	INSTRUCTIONS
ERASING_SHAPE_LOOP . . . . . . .  	L NEAR	0F89	INSTRUCTIONS
ESCAPE_PRESSED . . . . . . . . .  	L NEAR	0657	INSTRUCTIONS

GAME_INIT  . . . . . . . . . . .  	N PROC	12A5	INSTRUCTIONS	Length = 00A8
GAME_OVER  . . . . . . . . . . .  	L BYTE	0009	INSTRUCTIONS
GRAVITATION  . . . . . . . . . .  	N PROC	0C07	INSTRUCTIONS	Length = 00DA
GRAVITATION_FOR_P2 . . . . . . .  	L NEAR	0C2F	INSTRUCTIONS
GRAVITATION_HAS_SUCCEEDED  . . .  	L NEAR	0CD1	INSTRUCTIONS

J_ROTATION_IS_SET  . . . . . . .  	L NEAR	096D	INSTRUCTIONS

KEYBOARD_FUNCTION  . . . . . . .  	N PROC	04D7	INSTRUCTIONS	Length = 018D
KEYBOARD_FUNCTION_END  . . . . .  	L NEAR	065D	INSTRUCTIONS

LOOK_FOR_LINES_LOOP_END  . . . .  	L NEAR	0D70	INSTRUCTIONS
LOOK_FOR_LINES_TO_CLEAR  . . . .  	L NEAR	0D3C	INSTRUCTIONS
L_ROTATION_IS_SET  . . . . . . .  	L NEAR	09A9	INSTRUCTIONS

MAKE_J_SHAPE . . . . . . . . . .  	L NEAR	1027	INSTRUCTIONS
MAKE_LINE_SHAPE  . . . . . . . .  	L NEAR	10C7	INSTRUCTIONS
MAKE_L_SHAPE . . . . . . . . . .  	L NEAR	1067	INSTRUCTIONS
MAKE_NEW_SHAPE . . . . . . . . .  	N PROC	0FAD	INSTRUCTIONS	Length = 016D
MAKE_O_SHAPE . . . . . . . . . .  	L NEAR	10A7	INSTRUCTIONS
MAKE_T_SHAPE . . . . . . . . . .  	L NEAR	1087	INSTRUCTIONS
MAKE_Z_SHAPE . . . . . . . . . .  	L NEAR	1047	INSTRUCTIONS
MAPPING_COORDINATES_LOOP . . . .  	L NEAR	0DBC	INSTRUCTIONS
MAP_COORDINATES_TO_PIXEL_POSITI   	N PROC	0D8F	INSTRUCTIONS	Length = 0057
MOVE_LEFT  . . . . . . . . . . .  	N PROC	0B7B	INSTRUCTIONS	Length = 008C
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Symbols-3


MOVE_PIECE_DOWN  . . . . . . . .  	L NEAR	0C74	INSTRUCTIONS
MOVE_PIECE_LEFT  . . . . . . . .  	L NEAR	0BDC	INSTRUCTIONS
MOVE_PIECE_RIGHT . . . . . . . .  	L NEAR	0B51	INSTRUCTIONS
MOVE_RIGHT . . . . . . . . . . .  	N PROC	0AF0	INSTRUCTIONS	Length = 008B
MOVING_LEFT_FOR_P2 . . . . . . .  	L NEAR	0B94	INSTRUCTIONS
MOVING_RIGHT_FOR_P2  . . . . . .  	L NEAR	0B09	INSTRUCTIONS

NEXT_SHAPE_I . . . . . . . . . .  	L NEAR	0EF3	INSTRUCTIONS
NEXT_SHAPE_J . . . . . . . . . .  	L NEAR	0E9E	INSTRUCTIONS
NEXT_SHAPE_L . . . . . . . . . .  	L NEAR	0EC0	INSTRUCTIONS
NEXT_SHAPE_MAP_COORDINATES . . .  	L NEAR	0F04	INSTRUCTIONS
NEXT_SHAPE_O . . . . . . . . . .  	L NEAR	0EE2	INSTRUCTIONS
NEXT_SHAPE_OF_P2 . . . . . . . .  	L NEAR	0E60	INSTRUCTIONS
NEXT_SHAPE_T . . . . . . . . . .  	L NEAR	0ED1	INSTRUCTIONS
NEXT_SHAPE_Z . . . . . . . . . .  	L NEAR	0EAF	INSTRUCTIONS
NO_LINES_CLEARED . . . . . . . .  	L NEAR	0D89	INSTRUCTIONS
NUMBER_PRESSED . . . . . . . . .  	L NEAR	055B	INSTRUCTIONS

OTHER_PIECES_ARE_BLOCKING_LEFT .  	L NEAR	0BFA	INSTRUCTIONS
OTHER_PIECES_ARE_BLOCKING_RIGHT   	L NEAR	0B6F	INSTRUCTIONS

P1_BOARD . . . . . . . . . . . .  	L WORD	00CA	INSTRUCTIONS	Length = 00D2
P1_CAN_MOVE_D  . . . . . . . . .  	L BYTE	0288	INSTRUCTIONS
P1_COLOR . . . . . . . . . . . .  	L WORD	00C5	INSTRUCTIONS
P1_DELAY . . . . . . . . . . . .  	L BYTE	00C7	INSTRUCTIONS
P1_DOWN_PRESSED  . . . . . . . .  	L NEAR	05FC	INSTRUCTIONS
P1_DOWN_RELEASED . . . . . . . .  	L NEAR	060F	INSTRUCTIONS
P1_GRID_X  . . . . . . . . . . .  	L NEAR	0883	INSTRUCTIONS
P1_GRID_Y  . . . . . . . . . . .  	L NEAR	0880	INSTRUCTIONS
P1_IS_NOT_PRESSING_L . . . . . .  	L NEAR	0768	INSTRUCTIONS
P1_IS_NOT_PRESSING_R . . . . . .  	L NEAR	0729	INSTRUCTIONS
P1_KEEP_PRESSING_L . . . . . . .  	L NEAR	0755	INSTRUCTIONS
P1_KEEP_PRESSING_R . . . . . . .  	L NEAR	0716	INSTRUCTIONS
P1_KEY_D . . . . . . . . . . . .  	L WORD	00B8	INSTRUCTIONS
P1_KEY_L . . . . . . . . . . . .  	L WORD	00B6	INSTRUCTIONS
P1_KEY_LR  . . . . . . . . . . .  	L WORD	00BC	INSTRUCTIONS
P1_KEY_R . . . . . . . . . . . .  	L WORD	00B4	INSTRUCTIONS
P1_KEY_RR  . . . . . . . . . . .  	L WORD	00BA	INSTRUCTIONS
P1_LEFT_PRESSED  . . . . . . . .  	L NEAR	05E4	INSTRUCTIONS
P1_LEFT_RELEASED . . . . . . . .  	L NEAR	05ED	INSTRUCTIONS
P1_MOVE_STEP . . . . . . . . . .  	L BYTE	0282	INSTRUCTIONS
P1_MOVING_L  . . . . . . . . . .  	L BYTE	00C4	INSTRUCTIONS
P1_MOVING_R  . . . . . . . . . .  	L BYTE	00C3	INSTRUCTIONS
P1_NEXT_SHAPE  . . . . . . . . .  	L BYTE	0287	INSTRUCTIONS
P1_PIXEL_POSITIONS . . . . . . .  	L WORD	0278	INSTRUCTIONS	Length = 0004
P1_PRESSING_D  . . . . . . . . .  	L BYTE	00C0	INSTRUCTIONS
P1_PRESSING_L  . . . . . . . . .  	L BYTE	00BF	INSTRUCTIONS
P1_PRESSING_R  . . . . . . . . .  	L BYTE	00BE	INSTRUCTIONS
P1_PRESSING_RL . . . . . . . . .  	L BYTE	00C2	INSTRUCTIONS
P1_PRESSING_RR . . . . . . . . .  	L BYTE	00C1	INSTRUCTIONS
P1_RAND_NUMBER . . . . . . . . .  	L DWORD	0283	INSTRUCTIONS
P1_RIGHT_PRESSED . . . . . . . .  	L NEAR	05CC	INSTRUCTIONS
P1_RIGHT_RELEASED  . . . . . . .  	L NEAR	05D5	INSTRUCTIONS
P1_RL_PRESSED  . . . . . . . . .  	L NEAR	0627	INSTRUCTIONS
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Symbols-4


P1_ROTATION  . . . . . . . . . .  	L BYTE	00C9	INSTRUCTIONS
P1_RR_PRESSED  . . . . . . . . .  	L NEAR	061E	INSTRUCTIONS
P1_SHAPE . . . . . . . . . . . .  	L BYTE	00C8	INSTRUCTIONS
P1_SHAPE_X . . . . . . . . . . .  	L BYTE	026E	INSTRUCTIONS
P1_SHAPE_Y . . . . . . . . . . .  	L BYTE	026F	INSTRUCTIONS
P1_SPEED . . . . . . . . . . . .  	L BYTE	0280	INSTRUCTIONS
P1_SPEED_STEP  . . . . . . . . .  	L BYTE	0281	INSTRUCTIONS
P1_TILES_X . . . . . . . . . . .  	L BYTE	0270	INSTRUCTIONS	Length = 0004
P1_TILES_Y . . . . . . . . . . .  	L BYTE	0274	INSTRUCTIONS	Length = 0004
P1_TOP_LEFT  . . . . . . . . . .  	L WORD	00B2	INSTRUCTIONS
P1_TOP_LEFT_NEXT . . . . . . . .  	L WORD	00B0	INSTRUCTIONS
P2_BOARD . . . . . . . . . . . .  	L WORD	02A3	INSTRUCTIONS	Length = 00D2
P2_CAN_MOVE_D  . . . . . . . . .  	L BYTE	0461	INSTRUCTIONS
P2_COLOR . . . . . . . . . . . .  	L WORD	029E	INSTRUCTIONS
P2_DELAY . . . . . . . . . . . .  	L BYTE	02A0	INSTRUCTIONS
P2_DOWN_PRESSED  . . . . . . . .  	L NEAR	0598	INSTRUCTIONS
P2_DOWN_RELEASED . . . . . . . .  	L NEAR	05AB	INSTRUCTIONS
P2_GRID_X  . . . . . . . . . . .  	L NEAR	08A4	INSTRUCTIONS
P2_GRID_Y  . . . . . . . . . . .  	L NEAR	08A1	INSTRUCTIONS
P2_IS_NOT_PRESSING_L . . . . . .  	L NEAR	07E6	INSTRUCTIONS
P2_IS_NOT_PRESSING_R . . . . . .  	L NEAR	07A7	INSTRUCTIONS
P2_KEEP_PRESSING_L . . . . . . .  	L NEAR	07D3	INSTRUCTIONS
P2_KEEP_PRESSING_R . . . . . . .  	L NEAR	0794	INSTRUCTIONS
P2_KEY_D . . . . . . . . . . . .  	L WORD	0291	INSTRUCTIONS
P2_KEY_L . . . . . . . . . . . .  	L WORD	028F	INSTRUCTIONS
P2_KEY_LR  . . . . . . . . . . .  	L WORD	0295	INSTRUCTIONS
P2_KEY_R . . . . . . . . . . . .  	L WORD	028D	INSTRUCTIONS
P2_KEY_RR  . . . . . . . . . . .  	L WORD	0293	INSTRUCTIONS
P2_LEFT_PRESSED  . . . . . . . .  	L NEAR	0580	INSTRUCTIONS
P2_LEFT_RELEASED . . . . . . . .  	L NEAR	0589	INSTRUCTIONS
P2_MOVE_STEP . . . . . . . . . .  	L BYTE	045B	INSTRUCTIONS
P2_MOVING_L  . . . . . . . . . .  	L BYTE	029D	INSTRUCTIONS
P2_MOVING_R  . . . . . . . . . .  	L BYTE	029C	INSTRUCTIONS
P2_NEXT_SHAPE  . . . . . . . . .  	L BYTE	0460	INSTRUCTIONS
P2_PIXEL_POSITIONS . . . . . . .  	L WORD	0451	INSTRUCTIONS	Length = 0004
P2_PRESSING_D  . . . . . . . . .  	L BYTE	0299	INSTRUCTIONS
P2_PRESSING_L  . . . . . . . . .  	L BYTE	0298	INSTRUCTIONS
P2_PRESSING_R  . . . . . . . . .  	L BYTE	0297	INSTRUCTIONS
P2_PRESSING_RL . . . . . . . . .  	L BYTE	029B	INSTRUCTIONS
P2_PRESSING_RR . . . . . . . . .  	L BYTE	029A	INSTRUCTIONS
P2_RAND_NUMBER . . . . . . . . .  	L DWORD	045C	INSTRUCTIONS
P2_RIGHT_PRESSED . . . . . . . .  	L NEAR	0568	INSTRUCTIONS
P2_RIGHT_RELEASED  . . . . . . .  	L NEAR	0571	INSTRUCTIONS
P2_RL_PRESSED  . . . . . . . . .  	L NEAR	05C3	INSTRUCTIONS
P2_ROTATING  . . . . . . . . . .  	L NEAR	08DE	INSTRUCTIONS
P2_ROTATION  . . . . . . . . . .  	L BYTE	02A2	INSTRUCTIONS
P2_RR_PRESSED  . . . . . . . . .  	L NEAR	05BA	INSTRUCTIONS
P2_SHAPE . . . . . . . . . . . .  	L BYTE	02A1	INSTRUCTIONS
P2_SHAPE_X . . . . . . . . . . .  	L BYTE	0447	INSTRUCTIONS
P2_SHAPE_Y . . . . . . . . . . .  	L BYTE	0448	INSTRUCTIONS
P2_SPEED . . . . . . . . . . . .  	L BYTE	0459	INSTRUCTIONS
P2_SPEED_STEP  . . . . . . . . .  	L BYTE	045A	INSTRUCTIONS
P2_TILES_X . . . . . . . . . . .  	L BYTE	0449	INSTRUCTIONS	Length = 0004
P2_TILES_Y . . . . . . . . . . .  	L BYTE	044D	INSTRUCTIONS	Length = 0004
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Symbols-5


P2_TOP_LEFT  . . . . . . . . . .  	L WORD	028B	INSTRUCTIONS
P2_TOP_LEFT_NEXT . . . . . . . .  	L WORD	0289	INSTRUCTIONS

RANDOM_NUMBER  . . . . . . . . .  	L DWORD	000A	INSTRUCTIONS
ROTATE . . . . . . . . . . . . .  	N PROC	08C0	INSTRUCTIONS	Length = 0230
ROTATING_I . . . . . . . . . . .  	L NEAR	0A38	INSTRUCTIONS
ROTATING_I_1 . . . . . . . . . .  	L NEAR	0A4C	INSTRUCTIONS
ROTATING_J . . . . . . . . . . .  	L NEAR	0952	INSTRUCTIONS
ROTATING_L . . . . . . . . . . .  	L NEAR	098E	INSTRUCTIONS
ROTATING_S_1 . . . . . . . . . .  	L NEAR	0934	INSTRUCTIONS
ROTATING_T . . . . . . . . . . .  	L NEAR	09CA	INSTRUCTIONS
ROTATING_Z . . . . . . . . . . .  	L NEAR	0A06	INSTRUCTIONS
ROTATING_Z_1 . . . . . . . . . .  	L NEAR	0A1A	INSTRUCTIONS

SET_I_COORDINATES  . . . . . . .  	L NEAR	0A53	INSTRUCTIONS
SET_S_COORDINATES  . . . . . . .  	L NEAR	093B	INSTRUCTIONS
SET_Z_COORDINATES  . . . . . . .  	L NEAR	0A21	INSTRUCTIONS
SHAPE_FOR_P2 . . . . . . . . . .  	L NEAR	0FC2	INSTRUCTIONS
SHAPE_I_X  . . . . . . . . . . .  	L DWORD	0020	INSTRUCTIONS
SHAPE_I_Y  . . . . . . . . . . .  	L DWORD	0028	INSTRUCTIONS
SHAPE_J_X  . . . . . . . . . . .  	L DWORD	0070	INSTRUCTIONS
SHAPE_J_Y  . . . . . . . . . . .  	L DWORD	0080	INSTRUCTIONS
SHAPE_L_X  . . . . . . . . . . .  	L DWORD	0050	INSTRUCTIONS
SHAPE_L_Y  . . . . . . . . . . .  	L DWORD	0060	INSTRUCTIONS
SHAPE_O_X  . . . . . . . . . . .  	L DWORD	0018	INSTRUCTIONS
SHAPE_O_Y  . . . . . . . . . . .  	L DWORD	001C	INSTRUCTIONS
SHAPE_S_X  . . . . . . . . . . .  	L DWORD	0090	INSTRUCTIONS
SHAPE_S_Y  . . . . . . . . . . .  	L DWORD	0098	INSTRUCTIONS
SHAPE_T_X  . . . . . . . . . . .  	L DWORD	0030	INSTRUCTIONS
SHAPE_T_Y  . . . . . . . . . . .  	L DWORD	0040	INSTRUCTIONS
SHAPE_Z_X  . . . . . . . . . . .  	L DWORD	00A0	INSTRUCTIONS
SHAPE_Z_Y  . . . . . . . . . . .  	L DWORD	00A8	INSTRUCTIONS
SKIP_P1_FALLING  . . . . . . . .  	L NEAR	0835	INSTRUCTIONS
SKIP_P2_FALLING  . . . . . . . .  	L NEAR	0864	INSTRUCTIONS
SPACE_PRESSED  . . . . . . . . .  	L NEAR	0630	INSTRUCTIONS
START  . . . . . . . . . . . . .  	L NEAR	134D	INSTRUCTIONS
START_CLEARING_LINES . . . . . .  	L NEAR	0D39	INSTRUCTIONS
START_DRAWING_BOARD  . . . . . .  	L NEAR	1133	INSTRUCTIONS
START_DRAWING_NEXT_SHAPE . . . .  	L NEAR	0E69	INSTRUCTIONS
START_GRAVITATION  . . . . . . .  	L NEAR	0C3B	INSTRUCTIONS
START_MOVING_LEFT  . . . . . . .  	L NEAR	0B9A	INSTRUCTIONS
START_MOVING_RIGHT . . . . . . .  	L NEAR	0B0F	INSTRUCTIONS
START_RANDOM_NUMBERS . . . . . .  	N PROC	0462	INSTRUCTIONS	Length = 0045
START_ROTATING . . . . . . . . .  	L NEAR	08E4	INSTRUCTIONS
START_UPDATING_RANDOM_NUMBER . .  	L NEAR	04BE	INSTRUCTIONS

THE_END_OF_MOVING_LEFT . . . . .  	L NEAR	0BFF	INSTRUCTIONS
THE_END_OF_MOVING_RIGHT  . . . .  	L NEAR	0B74	INSTRUCTIONS
TILE_SIZE  . . . . . . . . . . .  	L WORD	0016	INSTRUCTIONS
TOP_BORDER . . . . . . . . . . .  	L NEAR	1245	INSTRUCTIONS
T_ROTATION_IS_SET  . . . . . . .  	L NEAR	09E5	INSTRUCTIONS

UPDATE_BOARD_AND_MAKE_NEW_SHAPE   	L NEAR	0C84	INSTRUCTIONS
UPDATE_P2_NUMBER . . . . . . . .  	L NEAR	04BB	INSTRUCTIONS
Microsoft (R) Macro Assembler Version 5.00                  3/17/19 13:32:24
                                                             Symbols-6


UPDATE_RANDOM_NUMBER . . . . . .  	N PROC	04A7	INSTRUCTIONS	Length = 0030

VARIABLES  . . . . . . . . . . .  	N PROC	0000	INSTRUCTIONS	Length = 0462
VECTOR8  . . . . . . . . . . . .  	L DWORD	0001	INSTRUCTIONS
VECTOR9  . . . . . . . . . . . .  	L DWORD	0005	INSTRUCTIONS

WAITING  . . . . . . . . . . . .  	L NEAR	1397	INSTRUCTIONS

@FILENAME  . . . . . . . . . . .  	TEXT  temp		


   1766 Source  Lines
   1766 Total   Lines
    252 Symbols

  50370 + 417022 Bytes symbol space free

      0 Warning Errors
      0 Severe  Errors
